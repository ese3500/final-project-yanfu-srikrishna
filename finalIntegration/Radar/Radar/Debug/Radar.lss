
Radar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001088  0000111c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001088  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080010c  0080010c  00001128  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f38  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4c  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000749  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  0000342c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ce  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ff  00000000  00000000  00003b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_10>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e8 e8       	ldi	r30, 0x88	; 136
      c8:	f0 e1       	ldi	r31, 0x10	; 16
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 30       	cpi	r26, 0x0C	; 12
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	ac e0       	ldi	r26, 0x0C	; 12
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a5 33       	cpi	r26, 0x35	; 53
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
      ea:	0c 94 42 08 	jmp	0x1084	; 0x1084 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
      f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
      f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
     100:	e2 ec       	ldi	r30, 0xC2	; 194
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	86 e0       	ldi	r24, 0x06	; 6
     106:	80 83       	st	Z, r24
  UCSR0C |= (1<<USBS0); // 2 stop bits
     108:	80 81       	ld	r24, Z
     10a:	88 60       	ori	r24, 0x08	; 8
     10c:	80 83       	st	Z, r24
     10e:	08 95       	ret

00000110 <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
     110:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     114:	95 ff       	sbrs	r25, 5
     116:	fc cf       	rjmp	.-8      	; 0x110 <UART_send>
  // Put data into buffer and send data
  UDR0 = data;
     118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     11c:	08 95       	ret

0000011e <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
     124:	03 c0       	rjmp	.+6      	; 0x12c <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
     126:	0e 94 88 00 	call	0x110	; 0x110 <UART_send>
  StringPtr++;
     12a:	21 96       	adiw	r28, 0x01	; 1
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
     12c:	88 81       	ld	r24, Y
     12e:	81 11       	cpse	r24, r1
     130:	fa cf       	rjmp	.-12     	; 0x126 <UART_putstring+0x8>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
}
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	08 95       	ret

00000138 <UART_init_new>:

void UART_init_new(int BAUD_PRESCALER)
{
	
	/*Set baud rate */
	UBRR1H = (unsigned char)(BAUD_PRESCALER>>8);
     138:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
	UBRR1L = (unsigned char)BAUD_PRESCALER;
     13c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	//Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     140:	88 e1       	ldi	r24, 0x18	; 24
     142:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	/* Set frame format: 2 stop bits, 8 data bits */
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); // 8 data bits
     146:	ea ec       	ldi	r30, 0xCA	; 202
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	86 e0       	ldi	r24, 0x06	; 6
     14c:	80 83       	st	Z, r24
	UCSR1C |= (1<<USBS1); // 2 stop bits
     14e:	80 81       	ld	r24, Z
     150:	88 60       	ori	r24, 0x08	; 8
     152:	80 83       	st	Z, r24
     154:	08 95       	ret

00000156 <UART_send_new>:
}

void UART_send_new(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSR1A & (1<<UDRE1)));
     156:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
     15a:	95 ff       	sbrs	r25, 5
     15c:	fc cf       	rjmp	.-8      	; 0x156 <UART_send_new>
	// Put data into buffer and send data
	UDR1 = data;
     15e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     162:	08 95       	ret

00000164 <UART_putstring_new>:
	
}

void UART_putstring_new(char* StringPtr)
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
     16a:	03 c0       	rjmp	.+6      	; 0x172 <UART_putstring_new+0xe>
	{
		UART_send_new(*StringPtr);
     16c:	0e 94 ab 00 	call	0x156	; 0x156 <UART_send_new>
		StringPtr++;
     170:	21 96       	adiw	r28, 0x01	; 1
	
}

void UART_putstring_new(char* StringPtr)
{
	while(*StringPtr != 0x00)
     172:	88 81       	ld	r24, Y
     174:	81 11       	cpse	r24, r1
     176:	fa cf       	rjmp	.-12     	; 0x16c <UART_putstring_new+0x8>
	{
		UART_send_new(*StringPtr);
		StringPtr++;
	}
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <initialize>:

volatile int initThresh = 30; 
volatile int finalThresh = 150; 

void initialize() {
	UART_init(BAUD_PRESCALER);
     17e:	87 e6       	ldi	r24, 0x67	; 103
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_init>
	UART_init_new(BAUD_PRESCALER);
     186:	87 e6       	ldi	r24, 0x67	; 103
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 9c 00 	call	0x138	; 0x138 <UART_init_new>
	cli();
     18e:	f8 94       	cli
	
//	sprintf(String, "Init\n");
	//UART_putstring(String);
	
	DDRD |= (1<<DDD6); //output pin
     190:	8a b1       	in	r24, 0x0a	; 10
     192:	80 64       	ori	r24, 0x40	; 64
     194:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<DDC0);
     196:	87 b1       	in	r24, 0x07	; 7
     198:	81 60       	ori	r24, 0x01	; 1
     19a:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDC1);
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	87 b9       	out	0x07, r24	; 7
	//DDRB &= ~(1<<PORTB1); //output pin
	DDRB &= ~(1<<PORTB0); //INPUT pin
     1a2:	84 b1       	in	r24, 0x04	; 4
     1a4:	8e 7f       	andi	r24, 0xFE	; 254
     1a6:	84 b9       	out	0x04, r24	; 4
	
	DDRD |= (1<<DDD5); //TC 0 --> PD5
     1a8:	8a b1       	in	r24, 0x0a	; 10
     1aa:	80 62       	ori	r24, 0x20	; 32
     1ac:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD3); //TC 2 --> PD3
     1ae:	8a b1       	in	r24, 0x0a	; 10
     1b0:	88 60       	ori	r24, 0x08	; 8
     1b2:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD2); //TC 3 --> PD2
     1b4:	8a b1       	in	r24, 0x0a	; 10
     1b6:	84 60       	ori	r24, 0x04	; 4
     1b8:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD0); //TC 3 --> PD0
     1ba:	8a b1       	in	r24, 0x0a	; 10
     1bc:	81 60       	ori	r24, 0x01	; 1
     1be:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1); //TC 3 --> PD1
     1c0:	8a b1       	in	r24, 0x0a	; 10
     1c2:	82 60       	ori	r24, 0x02	; 2
     1c4:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<PORTB2); //TC1 --> PB2
     1c6:	84 b1       	in	r24, 0x04	; 4
     1c8:	84 60       	ori	r24, 0x04	; 4
     1ca:	84 b9       	out	0x04, r24	; 4
	

	//-------------TIMER 0--------------PD5(50Hz for Motor)
	
	//prescale buzzer control Phase Correct PWM mode by 64
	TCCR0B |= (1<<CS02);
     1cc:	85 b5       	in	r24, 0x25	; 37
     1ce:	84 60       	ori	r24, 0x04	; 4
     1d0:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     1d2:	85 b5       	in	r24, 0x25	; 37
     1d4:	8d 7f       	andi	r24, 0xFD	; 253
     1d6:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
     1d8:	85 b5       	in	r24, 0x25	; 37
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	85 bd       	out	0x25, r24	; 37
	
	//SETS OPERATION MODE TO BE PHASE CORRECT MODE
	TCCR0A |= (1<<WGM00);
     1de:	84 b5       	in	r24, 0x24	; 36
     1e0:	81 60       	ori	r24, 0x01	; 1
     1e2:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<WGM01);
     1e4:	84 b5       	in	r24, 0x24	; 36
     1e6:	8d 7f       	andi	r24, 0xFD	; 253
     1e8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
     1ea:	85 b5       	in	r24, 0x25	; 37
     1ec:	88 60       	ori	r24, 0x08	; 8
     1ee:	85 bd       	out	0x25, r24	; 37
	
	//SETS OCCR0A AND OCCR0B
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
     1f0:	84 b5       	in	r24, 0x24	; 36
     1f2:	80 6a       	ori	r24, 0xA0	; 160
     1f4:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0));
     1f6:	84 b5       	in	r24, 0x24	; 36
     1f8:	8f 7a       	andi	r24, 0xAF	; 175
     1fa:	84 bd       	out	0x24, r24	; 36
	//TIFR0 |= (1<<OCF0A); 
	OCR0A = 156;
     1fc:	8c e9       	ldi	r24, 0x9C	; 156
     1fe:	87 bd       	out	0x27, r24	; 39
	OCR0B = OCR0A * 90.0/100;
     200:	67 b5       	in	r22, 0x27	; 39
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 37 04 	call	0x86e	; 0x86e <__floatsisf>
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	44 eb       	ldi	r20, 0xB4	; 180
     212:	52 e4       	ldi	r21, 0x42	; 66
     214:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	48 ec       	ldi	r20, 0xC8	; 200
     21e:	52 e4       	ldi	r21, 0x42	; 66
     220:	0e 94 8d 03 	call	0x71a	; 0x71a <__divsf3>
     224:	0e 94 06 04 	call	0x80c	; 0x80c <__fixunssfsi>
     228:	68 bd       	out	0x28, r22	; 40
	
	//-------------TIMER 2 -------------------PD3(20ns for Ultrasnic sensorTrigger)
	//prescaled by 8
	//CAUTION: DIFFERENT FROM OTHER TIMERS
	TCCR2B &= ~(1<<CS22);
     22a:	a1 eb       	ldi	r26, 0xB1	; 177
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	8c 91       	ld	r24, X
     230:	8b 7f       	andi	r24, 0xFB	; 251
     232:	8c 93       	st	X, r24
	TCCR2B |= (1<<CS21);
     234:	8c 91       	ld	r24, X
     236:	82 60       	ori	r24, 0x02	; 2
     238:	8c 93       	st	X, r24
	TCCR2B &= ~(1<<CS20);
     23a:	8c 91       	ld	r24, X
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	8c 93       	st	X, r24
		
	//SETS OPERATION MODE TO BE PHASE CORRECT MODE
	TCCR2A |= (1<<WGM20);
     240:	e0 eb       	ldi	r30, 0xB0	; 176
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	81 60       	ori	r24, 0x01	; 1
     248:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<WGM21);
     24a:	80 81       	ld	r24, Z
     24c:	8d 7f       	andi	r24, 0xFD	; 253
     24e:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22);
     250:	8c 91       	ld	r24, X
     252:	88 60       	ori	r24, 0x08	; 8
     254:	8c 93       	st	X, r24
	
	//SETS OCCR0A AND OCCR0B
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);
     256:	80 81       	ld	r24, Z
     258:	80 6a       	ori	r24, 0xA0	; 160
     25a:	80 83       	st	Z, r24
	TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0));
     25c:	80 81       	ld	r24, Z
     25e:	8f 7a       	andi	r24, 0xAF	; 175
     260:	80 83       	st	Z, r24
	//TIFR0 |= (1<<OCF0A); 
	OCR2A = 20; //was 20
     262:	e3 eb       	ldi	r30, 0xB3	; 179
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	84 e1       	ldi	r24, 0x14	; 20
     268:	80 83       	st	Z, r24
	OCR2B = OCR2A * 50/100;
     26a:	80 81       	ld	r24, Z
     26c:	22 e3       	ldi	r18, 0x32	; 50
     26e:	82 9f       	mul	r24, r18
     270:	c0 01       	movw	r24, r0
     272:	11 24       	eor	r1, r1
     274:	64 e6       	ldi	r22, 0x64	; 100
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 30 05 	call	0xa60	; 0xa60 <__divmodhi4>
     27c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	
	
	//--------------------TIMER 1---------------PB0(Ultrasonic sensor echo pin)
	//Prescale by 8
	TCCR1B &= ~(1<<CS10);
     280:	e1 e8       	ldi	r30, 0x81	; 129
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8e 7f       	andi	r24, 0xFE	; 254
     288:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);
     28a:	80 81       	ld	r24, Z
     28c:	8d 7f       	andi	r24, 0xFD	; 253
     28e:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12);
     290:	80 81       	ld	r24, Z
     292:	84 60       	ori	r24, 0x04	; 4
     294:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<ICES1);//Input capture edge select
     296:	80 81       	ld	r24, Z
     298:	80 64       	ori	r24, 0x40	; 64
     29a:	80 83       	st	Z, r24
	TIMSK1 |= (1<<ICIE1); //Input capture interrupt enable
     29c:	ef e6       	ldi	r30, 0x6F	; 111
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	80 62       	ori	r24, 0x20	; 32
     2a4:	80 83       	st	Z, r24
	TIFR1 |= (1 << ICF1); //Clear flag
     2a6:	86 b3       	in	r24, 0x16	; 22
     2a8:	80 62       	ori	r24, 0x20	; 32
     2aa:	86 bb       	out	0x16, r24	; 22
	TCCR3A &= ~((1 << COM3A0) | (1 << COM3B0));
	
	OCR3A = 156; //was 20
	OCR3B = OCR3A * 50/100;
*/
	sei();
     2ac:	78 94       	sei
     2ae:	08 95       	ret

000002b0 <__vector_10>:
}

ISR(TIMER1_CAPT_vect) // Capture event interrupt
{
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	2f 93       	push	r18
     2bc:	3f 93       	push	r19
     2be:	4f 93       	push	r20
     2c0:	5f 93       	push	r21
     2c2:	6f 93       	push	r22
     2c4:	7f 93       	push	r23
     2c6:	8f 93       	push	r24
     2c8:	9f 93       	push	r25
     2ca:	af 93       	push	r26
     2cc:	bf 93       	push	r27
     2ce:	ef 93       	push	r30
     2d0:	ff 93       	push	r31
	if (TCCR1B & (1<<ICES1)) { //If rising edge detected
     2d2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     2d6:	86 ff       	sbrs	r24, 6
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <__vector_10+0x3c>
		pulseBegin = TCNT1; //Store counter number at beginning 
     2da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     2de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     2e2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pulseBegin+0x1>
     2e6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pulseBegin>
     2ea:	4c c0       	rjmp	.+152    	; 0x384 <__vector_10+0xd4>
	}
	else {
		pulseEnd = TCNT1; //Store counter number at end.
     2ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     2f0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     2f4:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <pulseEnd+0x1>
     2f8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <pulseEnd>
		if (pulseEnd >= pulseBegin) {
     2fc:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <pulseEnd>
     300:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <pulseEnd+0x1>
     304:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <pulseBegin>
     308:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <pulseBegin+0x1>
     30c:	28 17       	cp	r18, r24
     30e:	39 07       	cpc	r19, r25
     310:	7c f0       	brlt	.+30     	; 0x330 <__vector_10+0x80>
			time = pulseEnd - pulseBegin; //See how many counts elapsed if no overflow occurred
     312:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <pulseEnd>
     316:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <pulseEnd+0x1>
     31a:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <pulseBegin>
     31e:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <pulseBegin+0x1>
     322:	82 1b       	sub	r24, r18
     324:	93 0b       	sbc	r25, r19
     326:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     32a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     32e:	0e c0       	rjmp	.+28     	; 0x34c <__vector_10+0x9c>
		}
		else {
			time = pulseEnd - pulseBegin + 65536; //Add 2^16 = 65536 if overflow occurred since we have 16 bit timer
     330:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <pulseEnd>
     334:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <pulseEnd+0x1>
     338:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <pulseBegin>
     33c:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <pulseBegin+0x1>
     340:	82 1b       	sub	r24, r18
     342:	93 0b       	sbc	r25, r19
     344:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     348:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
		}
		distance = time * 0.34/2; //Use the formula from datasheet
     34c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <time>
     350:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <time+0x1>
     354:	07 2e       	mov	r0, r23
     356:	00 0c       	add	r0, r0
     358:	88 0b       	sbc	r24, r24
     35a:	99 0b       	sbc	r25, r25
     35c:	0e 94 37 04 	call	0x86e	; 0x86e <__floatsisf>
     360:	2b e7       	ldi	r18, 0x7B	; 123
     362:	34 e1       	ldi	r19, 0x14	; 20
     364:	4e ea       	ldi	r20, 0xAE	; 174
     366:	5e e3       	ldi	r21, 0x3E	; 62
     368:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	5f e3       	ldi	r21, 0x3F	; 63
     374:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
     378:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
     37c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <distance+0x1>
     380:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <distance>
		//sprintf(String, "dist %d\n", distance);
		//UART_putstring(String);
		
	}
	TIFR1 |= (1<<ICF1); //clear input flag
     384:	86 b3       	in	r24, 0x16	; 22
     386:	80 62       	ori	r24, 0x20	; 32
     388:	86 bb       	out	0x16, r24	; 22
	TCCR1B ^= (1 << ICES1);
     38a:	e1 e8       	ldi	r30, 0x81	; 129
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	90 81       	ld	r25, Z
     390:	80 e4       	ldi	r24, 0x40	; 64
     392:	89 27       	eor	r24, r25
     394:	80 83       	st	Z, r24
	
}
     396:	ff 91       	pop	r31
     398:	ef 91       	pop	r30
     39a:	bf 91       	pop	r27
     39c:	af 91       	pop	r26
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	7f 91       	pop	r23
     3a4:	6f 91       	pop	r22
     3a6:	5f 91       	pop	r21
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <max>:
	}
	
}

int max(int x, int y) {
	if (x > y) {
     3b8:	68 17       	cp	r22, r24
     3ba:	79 07       	cpc	r23, r25
     3bc:	14 f0       	brlt	.+4      	; 0x3c2 <max+0xa>
		return x;
	}
	else {
		return y;
     3be:	86 2f       	mov	r24, r22
     3c0:	97 2f       	mov	r25, r23
	}
}
     3c2:	08 95       	ret

000003c4 <min>:
int min(int x, int y) {
	if (x < y) {
     3c4:	86 17       	cp	r24, r22
     3c6:	97 07       	cpc	r25, r23
     3c8:	14 f0       	brlt	.+4      	; 0x3ce <min+0xa>
		return x;
	}
	else {
		return y;
     3ca:	86 2f       	mov	r24, r22
     3cc:	97 2f       	mov	r25, r23
	}
}
     3ce:	08 95       	ret

000003d0 <threshold>:


void threshold() {
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
	int mini = min(initAngle, finalAngle);
     3d4:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <finalAngle>
     3d8:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <finalAngle+0x1>
     3dc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <initAngle>
     3e0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <initAngle+0x1>
     3e4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <min>
     3e8:	ec 01       	movw	r28, r24
	int maxi = max(initAngle, finalAngle);
     3ea:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <finalAngle>
     3ee:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <finalAngle+0x1>
     3f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <initAngle>
     3f6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <initAngle+0x1>
     3fa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <max>
//	UART_putstring(String);
	
//	sprintf(String, "finalThresh %d \n", finalThresh);
//	UART_putstring(String);
	
	if((mini > initThresh) && (maxi < finalThresh)){
     3fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <initThresh>
     402:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <initThresh+0x1>
     406:	2c 17       	cp	r18, r28
     408:	3d 07       	cpc	r19, r29
     40a:	a4 f4       	brge	.+40     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     40c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     410:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     414:	82 17       	cp	r24, r18
     416:	93 07       	cpc	r25, r19
     418:	6c f4       	brge	.+26     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		sprintf(String, "l\n\n");
     41a:	e8 e1       	ldi	r30, 0x18	; 24
     41c:	f1 e0       	ldi	r31, 0x01	; 1
     41e:	8c e6       	ldi	r24, 0x6C	; 108
     420:	9a e0       	ldi	r25, 0x0A	; 10
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	8a e0       	ldi	r24, 0x0A	; 10
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	93 83       	std	Z+3, r25	; 0x03
     42c:	82 83       	std	Z+2, r24	; 0x02
		UART_putstring(String);
     42e:	cf 01       	movw	r24, r30
     430:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
	}
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <detection>:

void detection()
{
	//sprintf(String, "distance1 %d \n", distance);
	//UART_putstring(String);
	if(distance < 12 && writtenAngle == 0) {
     43a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <distance>
     43e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <distance+0x1>
     442:	0c 97       	sbiw	r24, 0x0c	; 12
     444:	a4 f4       	brge	.+40     	; 0x46e <detection+0x34>
     446:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     44a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     44e:	89 2b       	or	r24, r25
     450:	71 f4       	brne	.+28     	; 0x46e <detection+0x34>
		//stop command
		
		initAngle = angle;
     452:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <angle>
     456:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <angle+0x1>
     45a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <initAngle+0x1>
     45e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <initAngle>
		writtenAngle = 1; 
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     46a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		
		//DEBUG
		//sprintf(String, "initAngle %d \n", initAngle);
		//UART_putstring(String);
	}
	if(distance >= 12 && writtenAngle == 1) {
     46e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <distance>
     472:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <distance+0x1>
     476:	0c 97       	sbiw	r24, 0x0c	; 12
     478:	fc f0       	brlt	.+62     	; 0x4b8 <detection+0x7e>
     47a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     47e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	c9 f4       	brne	.+50     	; 0x4b8 <detection+0x7e>
		finalAngle = angle;
     486:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <angle>
     48a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <angle+0x1>
     48e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <finalAngle+0x1>
     492:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <finalAngle>
		writtenAngle = 0; 
     496:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     49a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		sprintf(String, "s\n\n");
     49e:	e8 e1       	ldi	r30, 0x18	; 24
     4a0:	f1 e0       	ldi	r31, 0x01	; 1
     4a2:	83 e7       	ldi	r24, 0x73	; 115
     4a4:	9a e0       	ldi	r25, 0x0A	; 10
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	80 83       	st	Z, r24
     4aa:	8a e0       	ldi	r24, 0x0A	; 10
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	93 83       	std	Z+3, r25	; 0x03
     4b0:	82 83       	std	Z+2, r24	; 0x02
		UART_putstring(String);
     4b2:	cf 01       	movw	r24, r30
     4b4:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
		//_delay_ms(100);
		//DEBUG
		//sprintf(String, "finalAngle %d \n", finalAngle);
		//UART_putstring(String);
	}
	if(distance < 12) {
     4b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <distance>
     4bc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <distance+0x1>
     4c0:	0c 97       	sbiw	r24, 0x0c	; 12
     4c2:	14 f4       	brge	.+4      	; 0x4c8 <detection+0x8e>
		threshold();
     4c4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <threshold>
     4c8:	08 95       	ret

000004ca <main>:
}

int main(void)
{
    /* Replace with your application code */
	initialize(); 
     4ca:	0e 94 bf 00 	call	0x17e	; 0x17e <initialize>
	}
	*/
    while (1) 
    {
		
		sprintf(String, "f\n\n");
     4ce:	e8 e1       	ldi	r30, 0x18	; 24
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	86 e6       	ldi	r24, 0x66	; 102
     4d4:	9a e0       	ldi	r25, 0x0A	; 10
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	80 83       	st	Z, r24
     4da:	8a e0       	ldi	r24, 0x0A	; 10
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	93 83       	std	Z+3, r25	; 0x03
     4e0:	82 83       	std	Z+2, r24	; 0x02
		UART_putstring(String);
     4e2:	cf 01       	movw	r24, r30
     4e4:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
		_delay_ms(2000);
		
		_delay_ms(2000);
		*/
				
		for(int i = 1; i < 13; i++) {
     4e8:	c1 e0       	ldi	r28, 0x01	; 1
     4ea:	d0 e0       	ldi	r29, 0x00	; 0
     4ec:	4d c0       	rjmp	.+154    	; 0x588 <main+0xbe>
			OCR0B = OCR0A*(100 - i)/100;
     4ee:	47 b5       	in	r20, 0x27	; 39
     4f0:	64 e6       	ldi	r22, 0x64	; 100
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	9b 01       	movw	r18, r22
     4f6:	2c 1b       	sub	r18, r28
     4f8:	3d 0b       	sbc	r19, r29
     4fa:	42 9f       	mul	r20, r18
     4fc:	c0 01       	movw	r24, r0
     4fe:	43 9f       	mul	r20, r19
     500:	90 0d       	add	r25, r0
     502:	11 24       	eor	r1, r1
     504:	0e 94 30 05 	call	0xa60	; 0xa60 <__divmodhi4>
     508:	68 bd       	out	0x28, r22	; 40
			angle = 16.36*i - 16.36;
     50a:	be 01       	movw	r22, r28
     50c:	0d 2e       	mov	r0, r29
     50e:	00 0c       	add	r0, r0
     510:	88 0b       	sbc	r24, r24
     512:	99 0b       	sbc	r25, r25
     514:	0e 94 37 04 	call	0x86e	; 0x86e <__floatsisf>
     518:	28 e4       	ldi	r18, 0x48	; 72
     51a:	31 ee       	ldi	r19, 0xE1	; 225
     51c:	42 e8       	ldi	r20, 0x82	; 130
     51e:	51 e4       	ldi	r21, 0x41	; 65
     520:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
     524:	28 e4       	ldi	r18, 0x48	; 72
     526:	31 ee       	ldi	r19, 0xE1	; 225
     528:	42 e8       	ldi	r20, 0x82	; 130
     52a:	51 e4       	ldi	r21, 0x41	; 65
     52c:	0e 94 20 03 	call	0x640	; 0x640 <__subsf3>
     530:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
     534:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <angle+0x1>
     538:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <angle>
			sprintf(String, "a%03d\n", angle);
     53c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <angle>
     540:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <angle+0x1>
     544:	9f 93       	push	r25
     546:	8f 93       	push	r24
     548:	84 e0       	ldi	r24, 0x04	; 4
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	88 e1       	ldi	r24, 0x18	; 24
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	0e 94 58 05 	call	0xab0	; 0xab0 <sprintf>
			UART_putstring_new(String);
     55c:	88 e1       	ldi	r24, 0x18	; 24
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 b2 00 	call	0x164	; 0x164 <UART_putstring_new>
			detection(); 
     564:	0e 94 1d 02 	call	0x43a	; 0x43a <detection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     568:	2f ef       	ldi	r18, 0xFF	; 255
     56a:	81 ee       	ldi	r24, 0xE1	; 225
     56c:	94 e0       	ldi	r25, 0x04	; 4
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	80 40       	sbci	r24, 0x00	; 0
     572:	90 40       	sbci	r25, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <main+0xa4>
     576:	00 c0       	rjmp	.+0      	; 0x578 <main+0xae>
     578:	00 00       	nop
		_delay_ms(2000);
		
		_delay_ms(2000);
		*/
				
		for(int i = 1; i < 13; i++) {
     57a:	21 96       	adiw	r28, 0x01	; 1
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	cd 30       	cpi	r28, 0x0D	; 13
     58a:	d1 05       	cpc	r29, r1
     58c:	0c f4       	brge	.+2      	; 0x590 <main+0xc6>
     58e:	af cf       	rjmp	.-162    	; 0x4ee <main+0x24>
     590:	c1 e0       	ldi	r28, 0x01	; 1
     592:	d0 e0       	ldi	r29, 0x00	; 0
     594:	50 c0       	rjmp	.+160    	; 0x636 <main+0x16c>
		//	sprintf(String, "OCR0B %d \n", OCR0B);
		//	UART_putstring(String);
		}
		
		for(int i = 1; i < 13; i++) {
			OCR0B = OCR0A*(88 + i)/100;
     596:	47 b5       	in	r20, 0x27	; 39
     598:	9e 01       	movw	r18, r28
     59a:	28 5a       	subi	r18, 0xA8	; 168
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	42 9f       	mul	r20, r18
     5a0:	c0 01       	movw	r24, r0
     5a2:	43 9f       	mul	r20, r19
     5a4:	90 0d       	add	r25, r0
     5a6:	11 24       	eor	r1, r1
     5a8:	64 e6       	ldi	r22, 0x64	; 100
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	0e 94 30 05 	call	0xa60	; 0xa60 <__divmodhi4>
     5b0:	68 bd       	out	0x28, r22	; 40
			angle = 16.36*(13-i) - 16.36;
     5b2:	6d e0       	ldi	r22, 0x0D	; 13
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	6c 1b       	sub	r22, r28
     5b8:	7d 0b       	sbc	r23, r29
     5ba:	07 2e       	mov	r0, r23
     5bc:	00 0c       	add	r0, r0
     5be:	88 0b       	sbc	r24, r24
     5c0:	99 0b       	sbc	r25, r25
     5c2:	0e 94 37 04 	call	0x86e	; 0x86e <__floatsisf>
     5c6:	28 e4       	ldi	r18, 0x48	; 72
     5c8:	31 ee       	ldi	r19, 0xE1	; 225
     5ca:	42 e8       	ldi	r20, 0x82	; 130
     5cc:	51 e4       	ldi	r21, 0x41	; 65
     5ce:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
     5d2:	28 e4       	ldi	r18, 0x48	; 72
     5d4:	31 ee       	ldi	r19, 0xE1	; 225
     5d6:	42 e8       	ldi	r20, 0x82	; 130
     5d8:	51 e4       	ldi	r21, 0x41	; 65
     5da:	0e 94 20 03 	call	0x640	; 0x640 <__subsf3>
     5de:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
     5e2:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <angle+0x1>
     5e6:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <angle>
			sprintf(String, "a%03d\n", angle);
     5ea:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <angle>
     5ee:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <angle+0x1>
     5f2:	9f 93       	push	r25
     5f4:	8f 93       	push	r24
     5f6:	84 e0       	ldi	r24, 0x04	; 4
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	9f 93       	push	r25
     5fc:	8f 93       	push	r24
     5fe:	88 e1       	ldi	r24, 0x18	; 24
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	9f 93       	push	r25
     604:	8f 93       	push	r24
     606:	0e 94 58 05 	call	0xab0	; 0xab0 <sprintf>
			UART_putstring_new(String);
     60a:	88 e1       	ldi	r24, 0x18	; 24
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 b2 00 	call	0x164	; 0x164 <UART_putstring_new>
			detection(); 
     612:	0e 94 1d 02 	call	0x43a	; 0x43a <detection>
     616:	2f ef       	ldi	r18, 0xFF	; 255
     618:	81 ee       	ldi	r24, 0xE1	; 225
     61a:	94 e0       	ldi	r25, 0x04	; 4
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	80 40       	sbci	r24, 0x00	; 0
     620:	90 40       	sbci	r25, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <main+0x152>
     624:	00 c0       	rjmp	.+0      	; 0x626 <main+0x15c>
     626:	00 00       	nop
			_delay_ms(100);
		//	sprintf(String, "OCR0B %d \n", OCR0B);
		//	UART_putstring(String);
		}
		
		for(int i = 1; i < 13; i++) {
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	cd 30       	cpi	r28, 0x0D	; 13
     638:	d1 05       	cpc	r29, r1
     63a:	0c f4       	brge	.+2      	; 0x63e <main+0x174>
     63c:	ac cf       	rjmp	.-168    	; 0x596 <main+0xcc>
     63e:	47 cf       	rjmp	.-370    	; 0x4ce <main+0x4>

00000640 <__subsf3>:
     640:	50 58       	subi	r21, 0x80	; 128

00000642 <__addsf3>:
     642:	bb 27       	eor	r27, r27
     644:	aa 27       	eor	r26, r26
     646:	0e 94 38 03 	call	0x670	; 0x670 <__addsf3x>
     64a:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_round>
     64e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_pscA>
     652:	38 f0       	brcs	.+14     	; 0x662 <__addsf3+0x20>
     654:	0e 94 82 04 	call	0x904	; 0x904 <__fp_pscB>
     658:	20 f0       	brcs	.+8      	; 0x662 <__addsf3+0x20>
     65a:	39 f4       	brne	.+14     	; 0x66a <__addsf3+0x28>
     65c:	9f 3f       	cpi	r25, 0xFF	; 255
     65e:	19 f4       	brne	.+6      	; 0x666 <__addsf3+0x24>
     660:	26 f4       	brtc	.+8      	; 0x66a <__addsf3+0x28>
     662:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_nan>
     666:	0e f4       	brtc	.+2      	; 0x66a <__addsf3+0x28>
     668:	e0 95       	com	r30
     66a:	e7 fb       	bst	r30, 7
     66c:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_inf>

00000670 <__addsf3x>:
     670:	e9 2f       	mov	r30, r25
     672:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_split3>
     676:	58 f3       	brcs	.-42     	; 0x64e <__addsf3+0xc>
     678:	ba 17       	cp	r27, r26
     67a:	62 07       	cpc	r22, r18
     67c:	73 07       	cpc	r23, r19
     67e:	84 07       	cpc	r24, r20
     680:	95 07       	cpc	r25, r21
     682:	20 f0       	brcs	.+8      	; 0x68c <__addsf3x+0x1c>
     684:	79 f4       	brne	.+30     	; 0x6a4 <__addsf3x+0x34>
     686:	a6 f5       	brtc	.+104    	; 0x6f0 <__addsf3x+0x80>
     688:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_zero>
     68c:	0e f4       	brtc	.+2      	; 0x690 <__addsf3x+0x20>
     68e:	e0 95       	com	r30
     690:	0b 2e       	mov	r0, r27
     692:	ba 2f       	mov	r27, r26
     694:	a0 2d       	mov	r26, r0
     696:	0b 01       	movw	r0, r22
     698:	b9 01       	movw	r22, r18
     69a:	90 01       	movw	r18, r0
     69c:	0c 01       	movw	r0, r24
     69e:	ca 01       	movw	r24, r20
     6a0:	a0 01       	movw	r20, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	ff 27       	eor	r31, r31
     6a6:	59 1b       	sub	r21, r25
     6a8:	99 f0       	breq	.+38     	; 0x6d0 <__addsf3x+0x60>
     6aa:	59 3f       	cpi	r21, 0xF9	; 249
     6ac:	50 f4       	brcc	.+20     	; 0x6c2 <__addsf3x+0x52>
     6ae:	50 3e       	cpi	r21, 0xE0	; 224
     6b0:	68 f1       	brcs	.+90     	; 0x70c <__addsf3x+0x9c>
     6b2:	1a 16       	cp	r1, r26
     6b4:	f0 40       	sbci	r31, 0x00	; 0
     6b6:	a2 2f       	mov	r26, r18
     6b8:	23 2f       	mov	r18, r19
     6ba:	34 2f       	mov	r19, r20
     6bc:	44 27       	eor	r20, r20
     6be:	58 5f       	subi	r21, 0xF8	; 248
     6c0:	f3 cf       	rjmp	.-26     	; 0x6a8 <__addsf3x+0x38>
     6c2:	46 95       	lsr	r20
     6c4:	37 95       	ror	r19
     6c6:	27 95       	ror	r18
     6c8:	a7 95       	ror	r26
     6ca:	f0 40       	sbci	r31, 0x00	; 0
     6cc:	53 95       	inc	r21
     6ce:	c9 f7       	brne	.-14     	; 0x6c2 <__addsf3x+0x52>
     6d0:	7e f4       	brtc	.+30     	; 0x6f0 <__addsf3x+0x80>
     6d2:	1f 16       	cp	r1, r31
     6d4:	ba 0b       	sbc	r27, r26
     6d6:	62 0b       	sbc	r22, r18
     6d8:	73 0b       	sbc	r23, r19
     6da:	84 0b       	sbc	r24, r20
     6dc:	ba f0       	brmi	.+46     	; 0x70c <__addsf3x+0x9c>
     6de:	91 50       	subi	r25, 0x01	; 1
     6e0:	a1 f0       	breq	.+40     	; 0x70a <__addsf3x+0x9a>
     6e2:	ff 0f       	add	r31, r31
     6e4:	bb 1f       	adc	r27, r27
     6e6:	66 1f       	adc	r22, r22
     6e8:	77 1f       	adc	r23, r23
     6ea:	88 1f       	adc	r24, r24
     6ec:	c2 f7       	brpl	.-16     	; 0x6de <__addsf3x+0x6e>
     6ee:	0e c0       	rjmp	.+28     	; 0x70c <__addsf3x+0x9c>
     6f0:	ba 0f       	add	r27, r26
     6f2:	62 1f       	adc	r22, r18
     6f4:	73 1f       	adc	r23, r19
     6f6:	84 1f       	adc	r24, r20
     6f8:	48 f4       	brcc	.+18     	; 0x70c <__addsf3x+0x9c>
     6fa:	87 95       	ror	r24
     6fc:	77 95       	ror	r23
     6fe:	67 95       	ror	r22
     700:	b7 95       	ror	r27
     702:	f7 95       	ror	r31
     704:	9e 3f       	cpi	r25, 0xFE	; 254
     706:	08 f0       	brcs	.+2      	; 0x70a <__addsf3x+0x9a>
     708:	b0 cf       	rjmp	.-160    	; 0x66a <__addsf3+0x28>
     70a:	93 95       	inc	r25
     70c:	88 0f       	add	r24, r24
     70e:	08 f0       	brcs	.+2      	; 0x712 <__addsf3x+0xa2>
     710:	99 27       	eor	r25, r25
     712:	ee 0f       	add	r30, r30
     714:	97 95       	ror	r25
     716:	87 95       	ror	r24
     718:	08 95       	ret

0000071a <__divsf3>:
     71a:	0e 94 a1 03 	call	0x742	; 0x742 <__divsf3x>
     71e:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_round>
     722:	0e 94 82 04 	call	0x904	; 0x904 <__fp_pscB>
     726:	58 f0       	brcs	.+22     	; 0x73e <__divsf3+0x24>
     728:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_pscA>
     72c:	40 f0       	brcs	.+16     	; 0x73e <__divsf3+0x24>
     72e:	29 f4       	brne	.+10     	; 0x73a <__divsf3+0x20>
     730:	5f 3f       	cpi	r21, 0xFF	; 255
     732:	29 f0       	breq	.+10     	; 0x73e <__divsf3+0x24>
     734:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_inf>
     738:	51 11       	cpse	r21, r1
     73a:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_szero>
     73e:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_nan>

00000742 <__divsf3x>:
     742:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_split3>
     746:	68 f3       	brcs	.-38     	; 0x722 <__divsf3+0x8>

00000748 <__divsf3_pse>:
     748:	99 23       	and	r25, r25
     74a:	b1 f3       	breq	.-20     	; 0x738 <__divsf3+0x1e>
     74c:	55 23       	and	r21, r21
     74e:	91 f3       	breq	.-28     	; 0x734 <__divsf3+0x1a>
     750:	95 1b       	sub	r25, r21
     752:	55 0b       	sbc	r21, r21
     754:	bb 27       	eor	r27, r27
     756:	aa 27       	eor	r26, r26
     758:	62 17       	cp	r22, r18
     75a:	73 07       	cpc	r23, r19
     75c:	84 07       	cpc	r24, r20
     75e:	38 f0       	brcs	.+14     	; 0x76e <__divsf3_pse+0x26>
     760:	9f 5f       	subi	r25, 0xFF	; 255
     762:	5f 4f       	sbci	r21, 0xFF	; 255
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	44 1f       	adc	r20, r20
     76a:	aa 1f       	adc	r26, r26
     76c:	a9 f3       	breq	.-22     	; 0x758 <__divsf3_pse+0x10>
     76e:	35 d0       	rcall	.+106    	; 0x7da <__divsf3_pse+0x92>
     770:	0e 2e       	mov	r0, r30
     772:	3a f0       	brmi	.+14     	; 0x782 <__divsf3_pse+0x3a>
     774:	e0 e8       	ldi	r30, 0x80	; 128
     776:	32 d0       	rcall	.+100    	; 0x7dc <__divsf3_pse+0x94>
     778:	91 50       	subi	r25, 0x01	; 1
     77a:	50 40       	sbci	r21, 0x00	; 0
     77c:	e6 95       	lsr	r30
     77e:	00 1c       	adc	r0, r0
     780:	ca f7       	brpl	.-14     	; 0x774 <__divsf3_pse+0x2c>
     782:	2b d0       	rcall	.+86     	; 0x7da <__divsf3_pse+0x92>
     784:	fe 2f       	mov	r31, r30
     786:	29 d0       	rcall	.+82     	; 0x7da <__divsf3_pse+0x92>
     788:	66 0f       	add	r22, r22
     78a:	77 1f       	adc	r23, r23
     78c:	88 1f       	adc	r24, r24
     78e:	bb 1f       	adc	r27, r27
     790:	26 17       	cp	r18, r22
     792:	37 07       	cpc	r19, r23
     794:	48 07       	cpc	r20, r24
     796:	ab 07       	cpc	r26, r27
     798:	b0 e8       	ldi	r27, 0x80	; 128
     79a:	09 f0       	breq	.+2      	; 0x79e <__divsf3_pse+0x56>
     79c:	bb 0b       	sbc	r27, r27
     79e:	80 2d       	mov	r24, r0
     7a0:	bf 01       	movw	r22, r30
     7a2:	ff 27       	eor	r31, r31
     7a4:	93 58       	subi	r25, 0x83	; 131
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	3a f0       	brmi	.+14     	; 0x7b8 <__divsf3_pse+0x70>
     7aa:	9e 3f       	cpi	r25, 0xFE	; 254
     7ac:	51 05       	cpc	r21, r1
     7ae:	78 f0       	brcs	.+30     	; 0x7ce <__divsf3_pse+0x86>
     7b0:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_inf>
     7b4:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_szero>
     7b8:	5f 3f       	cpi	r21, 0xFF	; 255
     7ba:	e4 f3       	brlt	.-8      	; 0x7b4 <__divsf3_pse+0x6c>
     7bc:	98 3e       	cpi	r25, 0xE8	; 232
     7be:	d4 f3       	brlt	.-12     	; 0x7b4 <__divsf3_pse+0x6c>
     7c0:	86 95       	lsr	r24
     7c2:	77 95       	ror	r23
     7c4:	67 95       	ror	r22
     7c6:	b7 95       	ror	r27
     7c8:	f7 95       	ror	r31
     7ca:	9f 5f       	subi	r25, 0xFF	; 255
     7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__divsf3_pse+0x78>
     7ce:	88 0f       	add	r24, r24
     7d0:	91 1d       	adc	r25, r1
     7d2:	96 95       	lsr	r25
     7d4:	87 95       	ror	r24
     7d6:	97 f9       	bld	r25, 7
     7d8:	08 95       	ret
     7da:	e1 e0       	ldi	r30, 0x01	; 1
     7dc:	66 0f       	add	r22, r22
     7de:	77 1f       	adc	r23, r23
     7e0:	88 1f       	adc	r24, r24
     7e2:	bb 1f       	adc	r27, r27
     7e4:	62 17       	cp	r22, r18
     7e6:	73 07       	cpc	r23, r19
     7e8:	84 07       	cpc	r24, r20
     7ea:	ba 07       	cpc	r27, r26
     7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__divsf3_pse+0xae>
     7ee:	62 1b       	sub	r22, r18
     7f0:	73 0b       	sbc	r23, r19
     7f2:	84 0b       	sbc	r24, r20
     7f4:	ba 0b       	sbc	r27, r26
     7f6:	ee 1f       	adc	r30, r30
     7f8:	88 f7       	brcc	.-30     	; 0x7dc <__divsf3_pse+0x94>
     7fa:	e0 95       	com	r30
     7fc:	08 95       	ret

000007fe <__fixsfsi>:
     7fe:	0e 94 06 04 	call	0x80c	; 0x80c <__fixunssfsi>
     802:	68 94       	set
     804:	b1 11       	cpse	r27, r1
     806:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_szero>
     80a:	08 95       	ret

0000080c <__fixunssfsi>:
     80c:	0e 94 a2 04 	call	0x944	; 0x944 <__fp_splitA>
     810:	88 f0       	brcs	.+34     	; 0x834 <__fixunssfsi+0x28>
     812:	9f 57       	subi	r25, 0x7F	; 127
     814:	98 f0       	brcs	.+38     	; 0x83c <__fixunssfsi+0x30>
     816:	b9 2f       	mov	r27, r25
     818:	99 27       	eor	r25, r25
     81a:	b7 51       	subi	r27, 0x17	; 23
     81c:	b0 f0       	brcs	.+44     	; 0x84a <__fixunssfsi+0x3e>
     81e:	e1 f0       	breq	.+56     	; 0x858 <__fixunssfsi+0x4c>
     820:	66 0f       	add	r22, r22
     822:	77 1f       	adc	r23, r23
     824:	88 1f       	adc	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	1a f0       	brmi	.+6      	; 0x830 <__fixunssfsi+0x24>
     82a:	ba 95       	dec	r27
     82c:	c9 f7       	brne	.-14     	; 0x820 <__fixunssfsi+0x14>
     82e:	14 c0       	rjmp	.+40     	; 0x858 <__fixunssfsi+0x4c>
     830:	b1 30       	cpi	r27, 0x01	; 1
     832:	91 f0       	breq	.+36     	; 0x858 <__fixunssfsi+0x4c>
     834:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_zero>
     838:	b1 e0       	ldi	r27, 0x01	; 1
     83a:	08 95       	ret
     83c:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_zero>
     840:	67 2f       	mov	r22, r23
     842:	78 2f       	mov	r23, r24
     844:	88 27       	eor	r24, r24
     846:	b8 5f       	subi	r27, 0xF8	; 248
     848:	39 f0       	breq	.+14     	; 0x858 <__fixunssfsi+0x4c>
     84a:	b9 3f       	cpi	r27, 0xF9	; 249
     84c:	cc f3       	brlt	.-14     	; 0x840 <__fixunssfsi+0x34>
     84e:	86 95       	lsr	r24
     850:	77 95       	ror	r23
     852:	67 95       	ror	r22
     854:	b3 95       	inc	r27
     856:	d9 f7       	brne	.-10     	; 0x84e <__fixunssfsi+0x42>
     858:	3e f4       	brtc	.+14     	; 0x868 <__fixunssfsi+0x5c>
     85a:	90 95       	com	r25
     85c:	80 95       	com	r24
     85e:	70 95       	com	r23
     860:	61 95       	neg	r22
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	8f 4f       	sbci	r24, 0xFF	; 255
     866:	9f 4f       	sbci	r25, 0xFF	; 255
     868:	08 95       	ret

0000086a <__floatunsisf>:
     86a:	e8 94       	clt
     86c:	09 c0       	rjmp	.+18     	; 0x880 <__floatsisf+0x12>

0000086e <__floatsisf>:
     86e:	97 fb       	bst	r25, 7
     870:	3e f4       	brtc	.+14     	; 0x880 <__floatsisf+0x12>
     872:	90 95       	com	r25
     874:	80 95       	com	r24
     876:	70 95       	com	r23
     878:	61 95       	neg	r22
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	8f 4f       	sbci	r24, 0xFF	; 255
     87e:	9f 4f       	sbci	r25, 0xFF	; 255
     880:	99 23       	and	r25, r25
     882:	a9 f0       	breq	.+42     	; 0x8ae <__floatsisf+0x40>
     884:	f9 2f       	mov	r31, r25
     886:	96 e9       	ldi	r25, 0x96	; 150
     888:	bb 27       	eor	r27, r27
     88a:	93 95       	inc	r25
     88c:	f6 95       	lsr	r31
     88e:	87 95       	ror	r24
     890:	77 95       	ror	r23
     892:	67 95       	ror	r22
     894:	b7 95       	ror	r27
     896:	f1 11       	cpse	r31, r1
     898:	f8 cf       	rjmp	.-16     	; 0x88a <__floatsisf+0x1c>
     89a:	fa f4       	brpl	.+62     	; 0x8da <__floatsisf+0x6c>
     89c:	bb 0f       	add	r27, r27
     89e:	11 f4       	brne	.+4      	; 0x8a4 <__floatsisf+0x36>
     8a0:	60 ff       	sbrs	r22, 0
     8a2:	1b c0       	rjmp	.+54     	; 0x8da <__floatsisf+0x6c>
     8a4:	6f 5f       	subi	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	8f 4f       	sbci	r24, 0xFF	; 255
     8aa:	9f 4f       	sbci	r25, 0xFF	; 255
     8ac:	16 c0       	rjmp	.+44     	; 0x8da <__floatsisf+0x6c>
     8ae:	88 23       	and	r24, r24
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <__floatsisf+0x48>
     8b2:	96 e9       	ldi	r25, 0x96	; 150
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <__floatsisf+0x6a>
     8b6:	77 23       	and	r23, r23
     8b8:	21 f0       	breq	.+8      	; 0x8c2 <__floatsisf+0x54>
     8ba:	9e e8       	ldi	r25, 0x8E	; 142
     8bc:	87 2f       	mov	r24, r23
     8be:	76 2f       	mov	r23, r22
     8c0:	05 c0       	rjmp	.+10     	; 0x8cc <__floatsisf+0x5e>
     8c2:	66 23       	and	r22, r22
     8c4:	71 f0       	breq	.+28     	; 0x8e2 <__floatsisf+0x74>
     8c6:	96 e8       	ldi	r25, 0x86	; 134
     8c8:	86 2f       	mov	r24, r22
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	2a f0       	brmi	.+10     	; 0x8da <__floatsisf+0x6c>
     8d0:	9a 95       	dec	r25
     8d2:	66 0f       	add	r22, r22
     8d4:	77 1f       	adc	r23, r23
     8d6:	88 1f       	adc	r24, r24
     8d8:	da f7       	brpl	.-10     	; 0x8d0 <__floatsisf+0x62>
     8da:	88 0f       	add	r24, r24
     8dc:	96 95       	lsr	r25
     8de:	87 95       	ror	r24
     8e0:	97 f9       	bld	r25, 7
     8e2:	08 95       	ret

000008e4 <__fp_inf>:
     8e4:	97 f9       	bld	r25, 7
     8e6:	9f 67       	ori	r25, 0x7F	; 127
     8e8:	80 e8       	ldi	r24, 0x80	; 128
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	08 95       	ret

000008f0 <__fp_nan>:
     8f0:	9f ef       	ldi	r25, 0xFF	; 255
     8f2:	80 ec       	ldi	r24, 0xC0	; 192
     8f4:	08 95       	ret

000008f6 <__fp_pscA>:
     8f6:	00 24       	eor	r0, r0
     8f8:	0a 94       	dec	r0
     8fa:	16 16       	cp	r1, r22
     8fc:	17 06       	cpc	r1, r23
     8fe:	18 06       	cpc	r1, r24
     900:	09 06       	cpc	r0, r25
     902:	08 95       	ret

00000904 <__fp_pscB>:
     904:	00 24       	eor	r0, r0
     906:	0a 94       	dec	r0
     908:	12 16       	cp	r1, r18
     90a:	13 06       	cpc	r1, r19
     90c:	14 06       	cpc	r1, r20
     90e:	05 06       	cpc	r0, r21
     910:	08 95       	ret

00000912 <__fp_round>:
     912:	09 2e       	mov	r0, r25
     914:	03 94       	inc	r0
     916:	00 0c       	add	r0, r0
     918:	11 f4       	brne	.+4      	; 0x91e <__fp_round+0xc>
     91a:	88 23       	and	r24, r24
     91c:	52 f0       	brmi	.+20     	; 0x932 <__fp_round+0x20>
     91e:	bb 0f       	add	r27, r27
     920:	40 f4       	brcc	.+16     	; 0x932 <__fp_round+0x20>
     922:	bf 2b       	or	r27, r31
     924:	11 f4       	brne	.+4      	; 0x92a <__fp_round+0x18>
     926:	60 ff       	sbrs	r22, 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__fp_round+0x20>
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	8f 4f       	sbci	r24, 0xFF	; 255
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	08 95       	ret

00000934 <__fp_split3>:
     934:	57 fd       	sbrc	r21, 7
     936:	90 58       	subi	r25, 0x80	; 128
     938:	44 0f       	add	r20, r20
     93a:	55 1f       	adc	r21, r21
     93c:	59 f0       	breq	.+22     	; 0x954 <__fp_splitA+0x10>
     93e:	5f 3f       	cpi	r21, 0xFF	; 255
     940:	71 f0       	breq	.+28     	; 0x95e <__fp_splitA+0x1a>
     942:	47 95       	ror	r20

00000944 <__fp_splitA>:
     944:	88 0f       	add	r24, r24
     946:	97 fb       	bst	r25, 7
     948:	99 1f       	adc	r25, r25
     94a:	61 f0       	breq	.+24     	; 0x964 <__fp_splitA+0x20>
     94c:	9f 3f       	cpi	r25, 0xFF	; 255
     94e:	79 f0       	breq	.+30     	; 0x96e <__fp_splitA+0x2a>
     950:	87 95       	ror	r24
     952:	08 95       	ret
     954:	12 16       	cp	r1, r18
     956:	13 06       	cpc	r1, r19
     958:	14 06       	cpc	r1, r20
     95a:	55 1f       	adc	r21, r21
     95c:	f2 cf       	rjmp	.-28     	; 0x942 <__fp_split3+0xe>
     95e:	46 95       	lsr	r20
     960:	f1 df       	rcall	.-30     	; 0x944 <__fp_splitA>
     962:	08 c0       	rjmp	.+16     	; 0x974 <__fp_splitA+0x30>
     964:	16 16       	cp	r1, r22
     966:	17 06       	cpc	r1, r23
     968:	18 06       	cpc	r1, r24
     96a:	99 1f       	adc	r25, r25
     96c:	f1 cf       	rjmp	.-30     	; 0x950 <__fp_splitA+0xc>
     96e:	86 95       	lsr	r24
     970:	71 05       	cpc	r23, r1
     972:	61 05       	cpc	r22, r1
     974:	08 94       	sec
     976:	08 95       	ret

00000978 <__fp_zero>:
     978:	e8 94       	clt

0000097a <__fp_szero>:
     97a:	bb 27       	eor	r27, r27
     97c:	66 27       	eor	r22, r22
     97e:	77 27       	eor	r23, r23
     980:	cb 01       	movw	r24, r22
     982:	97 f9       	bld	r25, 7
     984:	08 95       	ret

00000986 <__mulsf3>:
     986:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__mulsf3x>
     98a:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_round>
     98e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_pscA>
     992:	38 f0       	brcs	.+14     	; 0x9a2 <__mulsf3+0x1c>
     994:	0e 94 82 04 	call	0x904	; 0x904 <__fp_pscB>
     998:	20 f0       	brcs	.+8      	; 0x9a2 <__mulsf3+0x1c>
     99a:	95 23       	and	r25, r21
     99c:	11 f0       	breq	.+4      	; 0x9a2 <__mulsf3+0x1c>
     99e:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_inf>
     9a2:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_nan>
     9a6:	11 24       	eor	r1, r1
     9a8:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_szero>

000009ac <__mulsf3x>:
     9ac:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_split3>
     9b0:	70 f3       	brcs	.-36     	; 0x98e <__mulsf3+0x8>

000009b2 <__mulsf3_pse>:
     9b2:	95 9f       	mul	r25, r21
     9b4:	c1 f3       	breq	.-16     	; 0x9a6 <__mulsf3+0x20>
     9b6:	95 0f       	add	r25, r21
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	55 1f       	adc	r21, r21
     9bc:	62 9f       	mul	r22, r18
     9be:	f0 01       	movw	r30, r0
     9c0:	72 9f       	mul	r23, r18
     9c2:	bb 27       	eor	r27, r27
     9c4:	f0 0d       	add	r31, r0
     9c6:	b1 1d       	adc	r27, r1
     9c8:	63 9f       	mul	r22, r19
     9ca:	aa 27       	eor	r26, r26
     9cc:	f0 0d       	add	r31, r0
     9ce:	b1 1d       	adc	r27, r1
     9d0:	aa 1f       	adc	r26, r26
     9d2:	64 9f       	mul	r22, r20
     9d4:	66 27       	eor	r22, r22
     9d6:	b0 0d       	add	r27, r0
     9d8:	a1 1d       	adc	r26, r1
     9da:	66 1f       	adc	r22, r22
     9dc:	82 9f       	mul	r24, r18
     9de:	22 27       	eor	r18, r18
     9e0:	b0 0d       	add	r27, r0
     9e2:	a1 1d       	adc	r26, r1
     9e4:	62 1f       	adc	r22, r18
     9e6:	73 9f       	mul	r23, r19
     9e8:	b0 0d       	add	r27, r0
     9ea:	a1 1d       	adc	r26, r1
     9ec:	62 1f       	adc	r22, r18
     9ee:	83 9f       	mul	r24, r19
     9f0:	a0 0d       	add	r26, r0
     9f2:	61 1d       	adc	r22, r1
     9f4:	22 1f       	adc	r18, r18
     9f6:	74 9f       	mul	r23, r20
     9f8:	33 27       	eor	r19, r19
     9fa:	a0 0d       	add	r26, r0
     9fc:	61 1d       	adc	r22, r1
     9fe:	23 1f       	adc	r18, r19
     a00:	84 9f       	mul	r24, r20
     a02:	60 0d       	add	r22, r0
     a04:	21 1d       	adc	r18, r1
     a06:	82 2f       	mov	r24, r18
     a08:	76 2f       	mov	r23, r22
     a0a:	6a 2f       	mov	r22, r26
     a0c:	11 24       	eor	r1, r1
     a0e:	9f 57       	subi	r25, 0x7F	; 127
     a10:	50 40       	sbci	r21, 0x00	; 0
     a12:	9a f0       	brmi	.+38     	; 0xa3a <__mulsf3_pse+0x88>
     a14:	f1 f0       	breq	.+60     	; 0xa52 <__mulsf3_pse+0xa0>
     a16:	88 23       	and	r24, r24
     a18:	4a f0       	brmi	.+18     	; 0xa2c <__mulsf3_pse+0x7a>
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	bb 1f       	adc	r27, r27
     a20:	66 1f       	adc	r22, r22
     a22:	77 1f       	adc	r23, r23
     a24:	88 1f       	adc	r24, r24
     a26:	91 50       	subi	r25, 0x01	; 1
     a28:	50 40       	sbci	r21, 0x00	; 0
     a2a:	a9 f7       	brne	.-22     	; 0xa16 <__mulsf3_pse+0x64>
     a2c:	9e 3f       	cpi	r25, 0xFE	; 254
     a2e:	51 05       	cpc	r21, r1
     a30:	80 f0       	brcs	.+32     	; 0xa52 <__mulsf3_pse+0xa0>
     a32:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_inf>
     a36:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_szero>
     a3a:	5f 3f       	cpi	r21, 0xFF	; 255
     a3c:	e4 f3       	brlt	.-8      	; 0xa36 <__mulsf3_pse+0x84>
     a3e:	98 3e       	cpi	r25, 0xE8	; 232
     a40:	d4 f3       	brlt	.-12     	; 0xa36 <__mulsf3_pse+0x84>
     a42:	86 95       	lsr	r24
     a44:	77 95       	ror	r23
     a46:	67 95       	ror	r22
     a48:	b7 95       	ror	r27
     a4a:	f7 95       	ror	r31
     a4c:	e7 95       	ror	r30
     a4e:	9f 5f       	subi	r25, 0xFF	; 255
     a50:	c1 f7       	brne	.-16     	; 0xa42 <__mulsf3_pse+0x90>
     a52:	fe 2b       	or	r31, r30
     a54:	88 0f       	add	r24, r24
     a56:	91 1d       	adc	r25, r1
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	97 f9       	bld	r25, 7
     a5e:	08 95       	ret

00000a60 <__divmodhi4>:
     a60:	97 fb       	bst	r25, 7
     a62:	07 2e       	mov	r0, r23
     a64:	16 f4       	brtc	.+4      	; 0xa6a <__divmodhi4+0xa>
     a66:	00 94       	com	r0
     a68:	07 d0       	rcall	.+14     	; 0xa78 <__divmodhi4_neg1>
     a6a:	77 fd       	sbrc	r23, 7
     a6c:	09 d0       	rcall	.+18     	; 0xa80 <__divmodhi4_neg2>
     a6e:	0e 94 44 05 	call	0xa88	; 0xa88 <__udivmodhi4>
     a72:	07 fc       	sbrc	r0, 7
     a74:	05 d0       	rcall	.+10     	; 0xa80 <__divmodhi4_neg2>
     a76:	3e f4       	brtc	.+14     	; 0xa86 <__divmodhi4_exit>

00000a78 <__divmodhi4_neg1>:
     a78:	90 95       	com	r25
     a7a:	81 95       	neg	r24
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	08 95       	ret

00000a80 <__divmodhi4_neg2>:
     a80:	70 95       	com	r23
     a82:	61 95       	neg	r22
     a84:	7f 4f       	sbci	r23, 0xFF	; 255

00000a86 <__divmodhi4_exit>:
     a86:	08 95       	ret

00000a88 <__udivmodhi4>:
     a88:	aa 1b       	sub	r26, r26
     a8a:	bb 1b       	sub	r27, r27
     a8c:	51 e1       	ldi	r21, 0x11	; 17
     a8e:	07 c0       	rjmp	.+14     	; 0xa9e <__udivmodhi4_ep>

00000a90 <__udivmodhi4_loop>:
     a90:	aa 1f       	adc	r26, r26
     a92:	bb 1f       	adc	r27, r27
     a94:	a6 17       	cp	r26, r22
     a96:	b7 07       	cpc	r27, r23
     a98:	10 f0       	brcs	.+4      	; 0xa9e <__udivmodhi4_ep>
     a9a:	a6 1b       	sub	r26, r22
     a9c:	b7 0b       	sbc	r27, r23

00000a9e <__udivmodhi4_ep>:
     a9e:	88 1f       	adc	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	5a 95       	dec	r21
     aa4:	a9 f7       	brne	.-22     	; 0xa90 <__udivmodhi4_loop>
     aa6:	80 95       	com	r24
     aa8:	90 95       	com	r25
     aaa:	bc 01       	movw	r22, r24
     aac:	cd 01       	movw	r24, r26
     aae:	08 95       	ret

00000ab0 <sprintf>:
     ab0:	ae e0       	ldi	r26, 0x0E	; 14
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	ee e5       	ldi	r30, 0x5E	; 94
     ab6:	f5 e0       	ldi	r31, 0x05	; 5
     ab8:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__prologue_saves__+0x1c>
     abc:	0d 89       	ldd	r16, Y+21	; 0x15
     abe:	1e 89       	ldd	r17, Y+22	; 0x16
     ac0:	86 e0       	ldi	r24, 0x06	; 6
     ac2:	8c 83       	std	Y+4, r24	; 0x04
     ac4:	1a 83       	std	Y+2, r17	; 0x02
     ac6:	09 83       	std	Y+1, r16	; 0x01
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	9f e7       	ldi	r25, 0x7F	; 127
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
     ad0:	ae 01       	movw	r20, r28
     ad2:	47 5e       	subi	r20, 0xE7	; 231
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	6f 89       	ldd	r22, Y+23	; 0x17
     ad8:	78 8d       	ldd	r23, Y+24	; 0x18
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <vfprintf>
     ae2:	ef 81       	ldd	r30, Y+7	; 0x07
     ae4:	f8 85       	ldd	r31, Y+8	; 0x08
     ae6:	e0 0f       	add	r30, r16
     ae8:	f1 1f       	adc	r31, r17
     aea:	10 82       	st	Z, r1
     aec:	2e 96       	adiw	r28, 0x0e	; 14
     aee:	e4 e0       	ldi	r30, 0x04	; 4
     af0:	0c 94 35 08 	jmp	0x106a	; 0x106a <__epilogue_restores__+0x1c>

00000af4 <vfprintf>:
     af4:	ab e0       	ldi	r26, 0x0B	; 11
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	e0 e8       	ldi	r30, 0x80	; 128
     afa:	f5 e0       	ldi	r31, 0x05	; 5
     afc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__prologue_saves__>
     b00:	6c 01       	movw	r12, r24
     b02:	7b 01       	movw	r14, r22
     b04:	8a 01       	movw	r16, r20
     b06:	fc 01       	movw	r30, r24
     b08:	17 82       	std	Z+7, r1	; 0x07
     b0a:	16 82       	std	Z+6, r1	; 0x06
     b0c:	83 81       	ldd	r24, Z+3	; 0x03
     b0e:	81 ff       	sbrs	r24, 1
     b10:	cc c1       	rjmp	.+920    	; 0xeaa <vfprintf+0x3b6>
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	3c 01       	movw	r6, r24
     b18:	f6 01       	movw	r30, r12
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	f7 01       	movw	r30, r14
     b1e:	93 fd       	sbrc	r25, 3
     b20:	85 91       	lpm	r24, Z+
     b22:	93 ff       	sbrs	r25, 3
     b24:	81 91       	ld	r24, Z+
     b26:	7f 01       	movw	r14, r30
     b28:	88 23       	and	r24, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <vfprintf+0x3a>
     b2c:	ba c1       	rjmp	.+884    	; 0xea2 <vfprintf+0x3ae>
     b2e:	85 32       	cpi	r24, 0x25	; 37
     b30:	39 f4       	brne	.+14     	; 0xb40 <vfprintf+0x4c>
     b32:	93 fd       	sbrc	r25, 3
     b34:	85 91       	lpm	r24, Z+
     b36:	93 ff       	sbrs	r25, 3
     b38:	81 91       	ld	r24, Z+
     b3a:	7f 01       	movw	r14, r30
     b3c:	85 32       	cpi	r24, 0x25	; 37
     b3e:	29 f4       	brne	.+10     	; 0xb4a <vfprintf+0x56>
     b40:	b6 01       	movw	r22, r12
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     b48:	e7 cf       	rjmp	.-50     	; 0xb18 <vfprintf+0x24>
     b4a:	91 2c       	mov	r9, r1
     b4c:	21 2c       	mov	r2, r1
     b4e:	31 2c       	mov	r3, r1
     b50:	ff e1       	ldi	r31, 0x1F	; 31
     b52:	f3 15       	cp	r31, r3
     b54:	d8 f0       	brcs	.+54     	; 0xb8c <vfprintf+0x98>
     b56:	8b 32       	cpi	r24, 0x2B	; 43
     b58:	79 f0       	breq	.+30     	; 0xb78 <vfprintf+0x84>
     b5a:	38 f4       	brcc	.+14     	; 0xb6a <vfprintf+0x76>
     b5c:	80 32       	cpi	r24, 0x20	; 32
     b5e:	79 f0       	breq	.+30     	; 0xb7e <vfprintf+0x8a>
     b60:	83 32       	cpi	r24, 0x23	; 35
     b62:	a1 f4       	brne	.+40     	; 0xb8c <vfprintf+0x98>
     b64:	23 2d       	mov	r18, r3
     b66:	20 61       	ori	r18, 0x10	; 16
     b68:	1d c0       	rjmp	.+58     	; 0xba4 <vfprintf+0xb0>
     b6a:	8d 32       	cpi	r24, 0x2D	; 45
     b6c:	61 f0       	breq	.+24     	; 0xb86 <vfprintf+0x92>
     b6e:	80 33       	cpi	r24, 0x30	; 48
     b70:	69 f4       	brne	.+26     	; 0xb8c <vfprintf+0x98>
     b72:	23 2d       	mov	r18, r3
     b74:	21 60       	ori	r18, 0x01	; 1
     b76:	16 c0       	rjmp	.+44     	; 0xba4 <vfprintf+0xb0>
     b78:	83 2d       	mov	r24, r3
     b7a:	82 60       	ori	r24, 0x02	; 2
     b7c:	38 2e       	mov	r3, r24
     b7e:	e3 2d       	mov	r30, r3
     b80:	e4 60       	ori	r30, 0x04	; 4
     b82:	3e 2e       	mov	r3, r30
     b84:	2a c0       	rjmp	.+84     	; 0xbda <vfprintf+0xe6>
     b86:	f3 2d       	mov	r31, r3
     b88:	f8 60       	ori	r31, 0x08	; 8
     b8a:	1d c0       	rjmp	.+58     	; 0xbc6 <vfprintf+0xd2>
     b8c:	37 fc       	sbrc	r3, 7
     b8e:	2d c0       	rjmp	.+90     	; 0xbea <vfprintf+0xf6>
     b90:	20 ed       	ldi	r18, 0xD0	; 208
     b92:	28 0f       	add	r18, r24
     b94:	2a 30       	cpi	r18, 0x0A	; 10
     b96:	40 f0       	brcs	.+16     	; 0xba8 <vfprintf+0xb4>
     b98:	8e 32       	cpi	r24, 0x2E	; 46
     b9a:	b9 f4       	brne	.+46     	; 0xbca <vfprintf+0xd6>
     b9c:	36 fc       	sbrc	r3, 6
     b9e:	81 c1       	rjmp	.+770    	; 0xea2 <vfprintf+0x3ae>
     ba0:	23 2d       	mov	r18, r3
     ba2:	20 64       	ori	r18, 0x40	; 64
     ba4:	32 2e       	mov	r3, r18
     ba6:	19 c0       	rjmp	.+50     	; 0xbda <vfprintf+0xe6>
     ba8:	36 fe       	sbrs	r3, 6
     baa:	06 c0       	rjmp	.+12     	; 0xbb8 <vfprintf+0xc4>
     bac:	8a e0       	ldi	r24, 0x0A	; 10
     bae:	98 9e       	mul	r9, r24
     bb0:	20 0d       	add	r18, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	92 2e       	mov	r9, r18
     bb6:	11 c0       	rjmp	.+34     	; 0xbda <vfprintf+0xe6>
     bb8:	ea e0       	ldi	r30, 0x0A	; 10
     bba:	2e 9e       	mul	r2, r30
     bbc:	20 0d       	add	r18, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	22 2e       	mov	r2, r18
     bc2:	f3 2d       	mov	r31, r3
     bc4:	f0 62       	ori	r31, 0x20	; 32
     bc6:	3f 2e       	mov	r3, r31
     bc8:	08 c0       	rjmp	.+16     	; 0xbda <vfprintf+0xe6>
     bca:	8c 36       	cpi	r24, 0x6C	; 108
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <vfprintf+0xe2>
     bce:	83 2d       	mov	r24, r3
     bd0:	80 68       	ori	r24, 0x80	; 128
     bd2:	38 2e       	mov	r3, r24
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <vfprintf+0xe6>
     bd6:	88 36       	cpi	r24, 0x68	; 104
     bd8:	41 f4       	brne	.+16     	; 0xbea <vfprintf+0xf6>
     bda:	f7 01       	movw	r30, r14
     bdc:	93 fd       	sbrc	r25, 3
     bde:	85 91       	lpm	r24, Z+
     be0:	93 ff       	sbrs	r25, 3
     be2:	81 91       	ld	r24, Z+
     be4:	7f 01       	movw	r14, r30
     be6:	81 11       	cpse	r24, r1
     be8:	b3 cf       	rjmp	.-154    	; 0xb50 <vfprintf+0x5c>
     bea:	98 2f       	mov	r25, r24
     bec:	9f 7d       	andi	r25, 0xDF	; 223
     bee:	95 54       	subi	r25, 0x45	; 69
     bf0:	93 30       	cpi	r25, 0x03	; 3
     bf2:	28 f4       	brcc	.+10     	; 0xbfe <vfprintf+0x10a>
     bf4:	0c 5f       	subi	r16, 0xFC	; 252
     bf6:	1f 4f       	sbci	r17, 0xFF	; 255
     bf8:	9f e3       	ldi	r25, 0x3F	; 63
     bfa:	99 83       	std	Y+1, r25	; 0x01
     bfc:	0d c0       	rjmp	.+26     	; 0xc18 <vfprintf+0x124>
     bfe:	83 36       	cpi	r24, 0x63	; 99
     c00:	31 f0       	breq	.+12     	; 0xc0e <vfprintf+0x11a>
     c02:	83 37       	cpi	r24, 0x73	; 115
     c04:	71 f0       	breq	.+28     	; 0xc22 <vfprintf+0x12e>
     c06:	83 35       	cpi	r24, 0x53	; 83
     c08:	09 f0       	breq	.+2      	; 0xc0c <vfprintf+0x118>
     c0a:	59 c0       	rjmp	.+178    	; 0xcbe <vfprintf+0x1ca>
     c0c:	21 c0       	rjmp	.+66     	; 0xc50 <vfprintf+0x15c>
     c0e:	f8 01       	movw	r30, r16
     c10:	80 81       	ld	r24, Z
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	0e 5f       	subi	r16, 0xFE	; 254
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	88 24       	eor	r8, r8
     c1a:	83 94       	inc	r8
     c1c:	91 2c       	mov	r9, r1
     c1e:	53 01       	movw	r10, r6
     c20:	13 c0       	rjmp	.+38     	; 0xc48 <vfprintf+0x154>
     c22:	28 01       	movw	r4, r16
     c24:	f2 e0       	ldi	r31, 0x02	; 2
     c26:	4f 0e       	add	r4, r31
     c28:	51 1c       	adc	r5, r1
     c2a:	f8 01       	movw	r30, r16
     c2c:	a0 80       	ld	r10, Z
     c2e:	b1 80       	ldd	r11, Z+1	; 0x01
     c30:	36 fe       	sbrs	r3, 6
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <vfprintf+0x146>
     c34:	69 2d       	mov	r22, r9
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <vfprintf+0x14a>
     c3a:	6f ef       	ldi	r22, 0xFF	; 255
     c3c:	7f ef       	ldi	r23, 0xFF	; 255
     c3e:	c5 01       	movw	r24, r10
     c40:	0e 94 66 07 	call	0xecc	; 0xecc <strnlen>
     c44:	4c 01       	movw	r8, r24
     c46:	82 01       	movw	r16, r4
     c48:	f3 2d       	mov	r31, r3
     c4a:	ff 77       	andi	r31, 0x7F	; 127
     c4c:	3f 2e       	mov	r3, r31
     c4e:	16 c0       	rjmp	.+44     	; 0xc7c <vfprintf+0x188>
     c50:	28 01       	movw	r4, r16
     c52:	22 e0       	ldi	r18, 0x02	; 2
     c54:	42 0e       	add	r4, r18
     c56:	51 1c       	adc	r5, r1
     c58:	f8 01       	movw	r30, r16
     c5a:	a0 80       	ld	r10, Z
     c5c:	b1 80       	ldd	r11, Z+1	; 0x01
     c5e:	36 fe       	sbrs	r3, 6
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <vfprintf+0x174>
     c62:	69 2d       	mov	r22, r9
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x178>
     c68:	6f ef       	ldi	r22, 0xFF	; 255
     c6a:	7f ef       	ldi	r23, 0xFF	; 255
     c6c:	c5 01       	movw	r24, r10
     c6e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <strnlen_P>
     c72:	4c 01       	movw	r8, r24
     c74:	f3 2d       	mov	r31, r3
     c76:	f0 68       	ori	r31, 0x80	; 128
     c78:	3f 2e       	mov	r3, r31
     c7a:	82 01       	movw	r16, r4
     c7c:	33 fc       	sbrc	r3, 3
     c7e:	1b c0       	rjmp	.+54     	; 0xcb6 <vfprintf+0x1c2>
     c80:	82 2d       	mov	r24, r2
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	88 16       	cp	r8, r24
     c86:	99 06       	cpc	r9, r25
     c88:	b0 f4       	brcc	.+44     	; 0xcb6 <vfprintf+0x1c2>
     c8a:	b6 01       	movw	r22, r12
     c8c:	80 e2       	ldi	r24, 0x20	; 32
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     c94:	2a 94       	dec	r2
     c96:	f4 cf       	rjmp	.-24     	; 0xc80 <vfprintf+0x18c>
     c98:	f5 01       	movw	r30, r10
     c9a:	37 fc       	sbrc	r3, 7
     c9c:	85 91       	lpm	r24, Z+
     c9e:	37 fe       	sbrs	r3, 7
     ca0:	81 91       	ld	r24, Z+
     ca2:	5f 01       	movw	r10, r30
     ca4:	b6 01       	movw	r22, r12
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     cac:	21 10       	cpse	r2, r1
     cae:	2a 94       	dec	r2
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	82 1a       	sub	r8, r18
     cb4:	91 08       	sbc	r9, r1
     cb6:	81 14       	cp	r8, r1
     cb8:	91 04       	cpc	r9, r1
     cba:	71 f7       	brne	.-36     	; 0xc98 <vfprintf+0x1a4>
     cbc:	e8 c0       	rjmp	.+464    	; 0xe8e <vfprintf+0x39a>
     cbe:	84 36       	cpi	r24, 0x64	; 100
     cc0:	11 f0       	breq	.+4      	; 0xcc6 <vfprintf+0x1d2>
     cc2:	89 36       	cpi	r24, 0x69	; 105
     cc4:	41 f5       	brne	.+80     	; 0xd16 <vfprintf+0x222>
     cc6:	f8 01       	movw	r30, r16
     cc8:	37 fe       	sbrs	r3, 7
     cca:	07 c0       	rjmp	.+14     	; 0xcda <vfprintf+0x1e6>
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	0c 5f       	subi	r16, 0xFC	; 252
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	08 c0       	rjmp	.+16     	; 0xcea <vfprintf+0x1f6>
     cda:	60 81       	ld	r22, Z
     cdc:	71 81       	ldd	r23, Z+1	; 0x01
     cde:	07 2e       	mov	r0, r23
     ce0:	00 0c       	add	r0, r0
     ce2:	88 0b       	sbc	r24, r24
     ce4:	99 0b       	sbc	r25, r25
     ce6:	0e 5f       	subi	r16, 0xFE	; 254
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
     cea:	f3 2d       	mov	r31, r3
     cec:	ff 76       	andi	r31, 0x6F	; 111
     cee:	3f 2e       	mov	r3, r31
     cf0:	97 ff       	sbrs	r25, 7
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <vfprintf+0x212>
     cf4:	90 95       	com	r25
     cf6:	80 95       	com	r24
     cf8:	70 95       	com	r23
     cfa:	61 95       	neg	r22
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	8f 4f       	sbci	r24, 0xFF	; 255
     d00:	9f 4f       	sbci	r25, 0xFF	; 255
     d02:	f0 68       	ori	r31, 0x80	; 128
     d04:	3f 2e       	mov	r3, r31
     d06:	2a e0       	ldi	r18, 0x0A	; 10
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	a3 01       	movw	r20, r6
     d0c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__ultoa_invert>
     d10:	88 2e       	mov	r8, r24
     d12:	86 18       	sub	r8, r6
     d14:	45 c0       	rjmp	.+138    	; 0xda0 <vfprintf+0x2ac>
     d16:	85 37       	cpi	r24, 0x75	; 117
     d18:	31 f4       	brne	.+12     	; 0xd26 <vfprintf+0x232>
     d1a:	23 2d       	mov	r18, r3
     d1c:	2f 7e       	andi	r18, 0xEF	; 239
     d1e:	b2 2e       	mov	r11, r18
     d20:	2a e0       	ldi	r18, 0x0A	; 10
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	25 c0       	rjmp	.+74     	; 0xd70 <vfprintf+0x27c>
     d26:	93 2d       	mov	r25, r3
     d28:	99 7f       	andi	r25, 0xF9	; 249
     d2a:	b9 2e       	mov	r11, r25
     d2c:	8f 36       	cpi	r24, 0x6F	; 111
     d2e:	c1 f0       	breq	.+48     	; 0xd60 <vfprintf+0x26c>
     d30:	18 f4       	brcc	.+6      	; 0xd38 <vfprintf+0x244>
     d32:	88 35       	cpi	r24, 0x58	; 88
     d34:	79 f0       	breq	.+30     	; 0xd54 <vfprintf+0x260>
     d36:	b5 c0       	rjmp	.+362    	; 0xea2 <vfprintf+0x3ae>
     d38:	80 37       	cpi	r24, 0x70	; 112
     d3a:	19 f0       	breq	.+6      	; 0xd42 <vfprintf+0x24e>
     d3c:	88 37       	cpi	r24, 0x78	; 120
     d3e:	21 f0       	breq	.+8      	; 0xd48 <vfprintf+0x254>
     d40:	b0 c0       	rjmp	.+352    	; 0xea2 <vfprintf+0x3ae>
     d42:	e9 2f       	mov	r30, r25
     d44:	e0 61       	ori	r30, 0x10	; 16
     d46:	be 2e       	mov	r11, r30
     d48:	b4 fe       	sbrs	r11, 4
     d4a:	0d c0       	rjmp	.+26     	; 0xd66 <vfprintf+0x272>
     d4c:	fb 2d       	mov	r31, r11
     d4e:	f4 60       	ori	r31, 0x04	; 4
     d50:	bf 2e       	mov	r11, r31
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <vfprintf+0x272>
     d54:	34 fe       	sbrs	r3, 4
     d56:	0a c0       	rjmp	.+20     	; 0xd6c <vfprintf+0x278>
     d58:	29 2f       	mov	r18, r25
     d5a:	26 60       	ori	r18, 0x06	; 6
     d5c:	b2 2e       	mov	r11, r18
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <vfprintf+0x278>
     d60:	28 e0       	ldi	r18, 0x08	; 8
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <vfprintf+0x27c>
     d66:	20 e1       	ldi	r18, 0x10	; 16
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <vfprintf+0x27c>
     d6c:	20 e1       	ldi	r18, 0x10	; 16
     d6e:	32 e0       	ldi	r19, 0x02	; 2
     d70:	f8 01       	movw	r30, r16
     d72:	b7 fe       	sbrs	r11, 7
     d74:	07 c0       	rjmp	.+14     	; 0xd84 <vfprintf+0x290>
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	0c 5f       	subi	r16, 0xFC	; 252
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	06 c0       	rjmp	.+12     	; 0xd90 <vfprintf+0x29c>
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 5f       	subi	r16, 0xFE	; 254
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	a3 01       	movw	r20, r6
     d92:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__ultoa_invert>
     d96:	88 2e       	mov	r8, r24
     d98:	86 18       	sub	r8, r6
     d9a:	fb 2d       	mov	r31, r11
     d9c:	ff 77       	andi	r31, 0x7F	; 127
     d9e:	3f 2e       	mov	r3, r31
     da0:	36 fe       	sbrs	r3, 6
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <vfprintf+0x2ca>
     da4:	23 2d       	mov	r18, r3
     da6:	2e 7f       	andi	r18, 0xFE	; 254
     da8:	a2 2e       	mov	r10, r18
     daa:	89 14       	cp	r8, r9
     dac:	58 f4       	brcc	.+22     	; 0xdc4 <vfprintf+0x2d0>
     dae:	34 fe       	sbrs	r3, 4
     db0:	0b c0       	rjmp	.+22     	; 0xdc8 <vfprintf+0x2d4>
     db2:	32 fc       	sbrc	r3, 2
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <vfprintf+0x2d4>
     db6:	83 2d       	mov	r24, r3
     db8:	8e 7e       	andi	r24, 0xEE	; 238
     dba:	a8 2e       	mov	r10, r24
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <vfprintf+0x2d4>
     dbe:	b8 2c       	mov	r11, r8
     dc0:	a3 2c       	mov	r10, r3
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <vfprintf+0x2d6>
     dc4:	b8 2c       	mov	r11, r8
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <vfprintf+0x2d6>
     dc8:	b9 2c       	mov	r11, r9
     dca:	a4 fe       	sbrs	r10, 4
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <vfprintf+0x2f8>
     dce:	fe 01       	movw	r30, r28
     dd0:	e8 0d       	add	r30, r8
     dd2:	f1 1d       	adc	r31, r1
     dd4:	80 81       	ld	r24, Z
     dd6:	80 33       	cpi	r24, 0x30	; 48
     dd8:	21 f4       	brne	.+8      	; 0xde2 <vfprintf+0x2ee>
     dda:	9a 2d       	mov	r25, r10
     ddc:	99 7e       	andi	r25, 0xE9	; 233
     dde:	a9 2e       	mov	r10, r25
     de0:	09 c0       	rjmp	.+18     	; 0xdf4 <vfprintf+0x300>
     de2:	a2 fe       	sbrs	r10, 2
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <vfprintf+0x2fe>
     de6:	b3 94       	inc	r11
     de8:	b3 94       	inc	r11
     dea:	04 c0       	rjmp	.+8      	; 0xdf4 <vfprintf+0x300>
     dec:	8a 2d       	mov	r24, r10
     dee:	86 78       	andi	r24, 0x86	; 134
     df0:	09 f0       	breq	.+2      	; 0xdf4 <vfprintf+0x300>
     df2:	b3 94       	inc	r11
     df4:	a3 fc       	sbrc	r10, 3
     df6:	11 c0       	rjmp	.+34     	; 0xe1a <vfprintf+0x326>
     df8:	a0 fe       	sbrs	r10, 0
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <vfprintf+0x314>
     dfc:	b2 14       	cp	r11, r2
     dfe:	88 f4       	brcc	.+34     	; 0xe22 <vfprintf+0x32e>
     e00:	28 0c       	add	r2, r8
     e02:	92 2c       	mov	r9, r2
     e04:	9b 18       	sub	r9, r11
     e06:	0e c0       	rjmp	.+28     	; 0xe24 <vfprintf+0x330>
     e08:	b2 14       	cp	r11, r2
     e0a:	60 f4       	brcc	.+24     	; 0xe24 <vfprintf+0x330>
     e0c:	b6 01       	movw	r22, r12
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e16:	b3 94       	inc	r11
     e18:	f7 cf       	rjmp	.-18     	; 0xe08 <vfprintf+0x314>
     e1a:	b2 14       	cp	r11, r2
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <vfprintf+0x330>
     e1e:	2b 18       	sub	r2, r11
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <vfprintf+0x332>
     e22:	98 2c       	mov	r9, r8
     e24:	21 2c       	mov	r2, r1
     e26:	a4 fe       	sbrs	r10, 4
     e28:	10 c0       	rjmp	.+32     	; 0xe4a <vfprintf+0x356>
     e2a:	b6 01       	movw	r22, r12
     e2c:	80 e3       	ldi	r24, 0x30	; 48
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e34:	a2 fe       	sbrs	r10, 2
     e36:	17 c0       	rjmp	.+46     	; 0xe66 <vfprintf+0x372>
     e38:	a1 fc       	sbrc	r10, 1
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <vfprintf+0x34e>
     e3c:	88 e7       	ldi	r24, 0x78	; 120
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <vfprintf+0x352>
     e42:	88 e5       	ldi	r24, 0x58	; 88
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	b6 01       	movw	r22, r12
     e48:	0c c0       	rjmp	.+24     	; 0xe62 <vfprintf+0x36e>
     e4a:	8a 2d       	mov	r24, r10
     e4c:	86 78       	andi	r24, 0x86	; 134
     e4e:	59 f0       	breq	.+22     	; 0xe66 <vfprintf+0x372>
     e50:	a1 fe       	sbrs	r10, 1
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x364>
     e54:	8b e2       	ldi	r24, 0x2B	; 43
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <vfprintf+0x366>
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	a7 fc       	sbrc	r10, 7
     e5c:	8d e2       	ldi	r24, 0x2D	; 45
     e5e:	b6 01       	movw	r22, r12
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e66:	89 14       	cp	r8, r9
     e68:	38 f4       	brcc	.+14     	; 0xe78 <vfprintf+0x384>
     e6a:	b6 01       	movw	r22, r12
     e6c:	80 e3       	ldi	r24, 0x30	; 48
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e74:	9a 94       	dec	r9
     e76:	f7 cf       	rjmp	.-18     	; 0xe66 <vfprintf+0x372>
     e78:	8a 94       	dec	r8
     e7a:	f3 01       	movw	r30, r6
     e7c:	e8 0d       	add	r30, r8
     e7e:	f1 1d       	adc	r31, r1
     e80:	80 81       	ld	r24, Z
     e82:	b6 01       	movw	r22, r12
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e8a:	81 10       	cpse	r8, r1
     e8c:	f5 cf       	rjmp	.-22     	; 0xe78 <vfprintf+0x384>
     e8e:	22 20       	and	r2, r2
     e90:	09 f4       	brne	.+2      	; 0xe94 <vfprintf+0x3a0>
     e92:	42 ce       	rjmp	.-892    	; 0xb18 <vfprintf+0x24>
     e94:	b6 01       	movw	r22, r12
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e9e:	2a 94       	dec	r2
     ea0:	f6 cf       	rjmp	.-20     	; 0xe8e <vfprintf+0x39a>
     ea2:	f6 01       	movw	r30, r12
     ea4:	86 81       	ldd	r24, Z+6	; 0x06
     ea6:	97 81       	ldd	r25, Z+7	; 0x07
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <vfprintf+0x3ba>
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	9f ef       	ldi	r25, 0xFF	; 255
     eae:	2b 96       	adiw	r28, 0x0b	; 11
     eb0:	e2 e1       	ldi	r30, 0x12	; 18
     eb2:	0c 94 27 08 	jmp	0x104e	; 0x104e <__epilogue_restores__>

00000eb6 <strnlen_P>:
     eb6:	fc 01       	movw	r30, r24
     eb8:	05 90       	lpm	r0, Z+
     eba:	61 50       	subi	r22, 0x01	; 1
     ebc:	70 40       	sbci	r23, 0x00	; 0
     ebe:	01 10       	cpse	r0, r1
     ec0:	d8 f7       	brcc	.-10     	; 0xeb8 <strnlen_P+0x2>
     ec2:	80 95       	com	r24
     ec4:	90 95       	com	r25
     ec6:	8e 0f       	add	r24, r30
     ec8:	9f 1f       	adc	r25, r31
     eca:	08 95       	ret

00000ecc <strnlen>:
     ecc:	fc 01       	movw	r30, r24
     ece:	61 50       	subi	r22, 0x01	; 1
     ed0:	70 40       	sbci	r23, 0x00	; 0
     ed2:	01 90       	ld	r0, Z+
     ed4:	01 10       	cpse	r0, r1
     ed6:	d8 f7       	brcc	.-10     	; 0xece <strnlen+0x2>
     ed8:	80 95       	com	r24
     eda:	90 95       	com	r25
     edc:	8e 0f       	add	r24, r30
     ede:	9f 1f       	adc	r25, r31
     ee0:	08 95       	ret

00000ee2 <fputc>:
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	fb 01       	movw	r30, r22
     eec:	23 81       	ldd	r18, Z+3	; 0x03
     eee:	21 fd       	sbrc	r18, 1
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <fputc+0x16>
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	9f ef       	ldi	r25, 0xFF	; 255
     ef6:	2c c0       	rjmp	.+88     	; 0xf50 <fputc+0x6e>
     ef8:	22 ff       	sbrs	r18, 2
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <fputc+0x46>
     efc:	46 81       	ldd	r20, Z+6	; 0x06
     efe:	57 81       	ldd	r21, Z+7	; 0x07
     f00:	24 81       	ldd	r18, Z+4	; 0x04
     f02:	35 81       	ldd	r19, Z+5	; 0x05
     f04:	42 17       	cp	r20, r18
     f06:	53 07       	cpc	r21, r19
     f08:	44 f4       	brge	.+16     	; 0xf1a <fputc+0x38>
     f0a:	a0 81       	ld	r26, Z
     f0c:	b1 81       	ldd	r27, Z+1	; 0x01
     f0e:	9d 01       	movw	r18, r26
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	31 83       	std	Z+1, r19	; 0x01
     f16:	20 83       	st	Z, r18
     f18:	8c 93       	st	X, r24
     f1a:	26 81       	ldd	r18, Z+6	; 0x06
     f1c:	37 81       	ldd	r19, Z+7	; 0x07
     f1e:	2f 5f       	subi	r18, 0xFF	; 255
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	37 83       	std	Z+7, r19	; 0x07
     f24:	26 83       	std	Z+6, r18	; 0x06
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <fputc+0x6e>
     f28:	8b 01       	movw	r16, r22
     f2a:	ec 01       	movw	r28, r24
     f2c:	fb 01       	movw	r30, r22
     f2e:	00 84       	ldd	r0, Z+8	; 0x08
     f30:	f1 85       	ldd	r31, Z+9	; 0x09
     f32:	e0 2d       	mov	r30, r0
     f34:	09 95       	icall
     f36:	89 2b       	or	r24, r25
     f38:	e1 f6       	brne	.-72     	; 0xef2 <fputc+0x10>
     f3a:	d8 01       	movw	r26, r16
     f3c:	16 96       	adiw	r26, 0x06	; 6
     f3e:	8d 91       	ld	r24, X+
     f40:	9c 91       	ld	r25, X
     f42:	17 97       	sbiw	r26, 0x07	; 7
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	17 96       	adiw	r26, 0x07	; 7
     f48:	9c 93       	st	X, r25
     f4a:	8e 93       	st	-X, r24
     f4c:	16 97       	sbiw	r26, 0x06	; 6
     f4e:	ce 01       	movw	r24, r28
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <__ultoa_invert>:
     f5a:	fa 01       	movw	r30, r20
     f5c:	aa 27       	eor	r26, r26
     f5e:	28 30       	cpi	r18, 0x08	; 8
     f60:	51 f1       	breq	.+84     	; 0xfb6 <__ultoa_invert+0x5c>
     f62:	20 31       	cpi	r18, 0x10	; 16
     f64:	81 f1       	breq	.+96     	; 0xfc6 <__ultoa_invert+0x6c>
     f66:	e8 94       	clt
     f68:	6f 93       	push	r22
     f6a:	6e 7f       	andi	r22, 0xFE	; 254
     f6c:	6e 5f       	subi	r22, 0xFE	; 254
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	af 4f       	sbci	r26, 0xFF	; 255
     f76:	b1 e0       	ldi	r27, 0x01	; 1
     f78:	3e d0       	rcall	.+124    	; 0xff6 <__ultoa_invert+0x9c>
     f7a:	b4 e0       	ldi	r27, 0x04	; 4
     f7c:	3c d0       	rcall	.+120    	; 0xff6 <__ultoa_invert+0x9c>
     f7e:	67 0f       	add	r22, r23
     f80:	78 1f       	adc	r23, r24
     f82:	89 1f       	adc	r24, r25
     f84:	9a 1f       	adc	r25, r26
     f86:	a1 1d       	adc	r26, r1
     f88:	68 0f       	add	r22, r24
     f8a:	79 1f       	adc	r23, r25
     f8c:	8a 1f       	adc	r24, r26
     f8e:	91 1d       	adc	r25, r1
     f90:	a1 1d       	adc	r26, r1
     f92:	6a 0f       	add	r22, r26
     f94:	71 1d       	adc	r23, r1
     f96:	81 1d       	adc	r24, r1
     f98:	91 1d       	adc	r25, r1
     f9a:	a1 1d       	adc	r26, r1
     f9c:	20 d0       	rcall	.+64     	; 0xfde <__ultoa_invert+0x84>
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <__ultoa_invert+0x48>
     fa0:	68 94       	set
     fa2:	3f 91       	pop	r19
     fa4:	2a e0       	ldi	r18, 0x0A	; 10
     fa6:	26 9f       	mul	r18, r22
     fa8:	11 24       	eor	r1, r1
     faa:	30 19       	sub	r19, r0
     fac:	30 5d       	subi	r19, 0xD0	; 208
     fae:	31 93       	st	Z+, r19
     fb0:	de f6       	brtc	.-74     	; 0xf68 <__ultoa_invert+0xe>
     fb2:	cf 01       	movw	r24, r30
     fb4:	08 95       	ret
     fb6:	46 2f       	mov	r20, r22
     fb8:	47 70       	andi	r20, 0x07	; 7
     fba:	40 5d       	subi	r20, 0xD0	; 208
     fbc:	41 93       	st	Z+, r20
     fbe:	b3 e0       	ldi	r27, 0x03	; 3
     fc0:	0f d0       	rcall	.+30     	; 0xfe0 <__ultoa_invert+0x86>
     fc2:	c9 f7       	brne	.-14     	; 0xfb6 <__ultoa_invert+0x5c>
     fc4:	f6 cf       	rjmp	.-20     	; 0xfb2 <__ultoa_invert+0x58>
     fc6:	46 2f       	mov	r20, r22
     fc8:	4f 70       	andi	r20, 0x0F	; 15
     fca:	40 5d       	subi	r20, 0xD0	; 208
     fcc:	4a 33       	cpi	r20, 0x3A	; 58
     fce:	18 f0       	brcs	.+6      	; 0xfd6 <__ultoa_invert+0x7c>
     fd0:	49 5d       	subi	r20, 0xD9	; 217
     fd2:	31 fd       	sbrc	r19, 1
     fd4:	40 52       	subi	r20, 0x20	; 32
     fd6:	41 93       	st	Z+, r20
     fd8:	02 d0       	rcall	.+4      	; 0xfde <__ultoa_invert+0x84>
     fda:	a9 f7       	brne	.-22     	; 0xfc6 <__ultoa_invert+0x6c>
     fdc:	ea cf       	rjmp	.-44     	; 0xfb2 <__ultoa_invert+0x58>
     fde:	b4 e0       	ldi	r27, 0x04	; 4
     fe0:	a6 95       	lsr	r26
     fe2:	97 95       	ror	r25
     fe4:	87 95       	ror	r24
     fe6:	77 95       	ror	r23
     fe8:	67 95       	ror	r22
     fea:	ba 95       	dec	r27
     fec:	c9 f7       	brne	.-14     	; 0xfe0 <__ultoa_invert+0x86>
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	61 05       	cpc	r22, r1
     ff2:	71 05       	cpc	r23, r1
     ff4:	08 95       	ret
     ff6:	9b 01       	movw	r18, r22
     ff8:	ac 01       	movw	r20, r24
     ffa:	0a 2e       	mov	r0, r26
     ffc:	06 94       	lsr	r0
     ffe:	57 95       	ror	r21
    1000:	47 95       	ror	r20
    1002:	37 95       	ror	r19
    1004:	27 95       	ror	r18
    1006:	ba 95       	dec	r27
    1008:	c9 f7       	brne	.-14     	; 0xffc <__ultoa_invert+0xa2>
    100a:	62 0f       	add	r22, r18
    100c:	73 1f       	adc	r23, r19
    100e:	84 1f       	adc	r24, r20
    1010:	95 1f       	adc	r25, r21
    1012:	a0 1d       	adc	r26, r0
    1014:	08 95       	ret

00001016 <__prologue_saves__>:
    1016:	2f 92       	push	r2
    1018:	3f 92       	push	r3
    101a:	4f 92       	push	r4
    101c:	5f 92       	push	r5
    101e:	6f 92       	push	r6
    1020:	7f 92       	push	r7
    1022:	8f 92       	push	r8
    1024:	9f 92       	push	r9
    1026:	af 92       	push	r10
    1028:	bf 92       	push	r11
    102a:	cf 92       	push	r12
    102c:	df 92       	push	r13
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	ca 1b       	sub	r28, r26
    1040:	db 0b       	sbc	r29, r27
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	09 94       	ijmp

0000104e <__epilogue_restores__>:
    104e:	2a 88       	ldd	r2, Y+18	; 0x12
    1050:	39 88       	ldd	r3, Y+17	; 0x11
    1052:	48 88       	ldd	r4, Y+16	; 0x10
    1054:	5f 84       	ldd	r5, Y+15	; 0x0f
    1056:	6e 84       	ldd	r6, Y+14	; 0x0e
    1058:	7d 84       	ldd	r7, Y+13	; 0x0d
    105a:	8c 84       	ldd	r8, Y+12	; 0x0c
    105c:	9b 84       	ldd	r9, Y+11	; 0x0b
    105e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1060:	b9 84       	ldd	r11, Y+9	; 0x09
    1062:	c8 84       	ldd	r12, Y+8	; 0x08
    1064:	df 80       	ldd	r13, Y+7	; 0x07
    1066:	ee 80       	ldd	r14, Y+6	; 0x06
    1068:	fd 80       	ldd	r15, Y+5	; 0x05
    106a:	0c 81       	ldd	r16, Y+4	; 0x04
    106c:	1b 81       	ldd	r17, Y+3	; 0x03
    106e:	aa 81       	ldd	r26, Y+2	; 0x02
    1070:	b9 81       	ldd	r27, Y+1	; 0x01
    1072:	ce 0f       	add	r28, r30
    1074:	d1 1d       	adc	r29, r1
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	ed 01       	movw	r28, r26
    1082:	08 95       	ret

00001084 <_exit>:
    1084:	f8 94       	cli

00001086 <__stop_program>:
    1086:	ff cf       	rjmp	.-2      	; 0x1086 <__stop_program>
