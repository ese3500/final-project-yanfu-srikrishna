/*
 * GccApplication1.c
 *
 * Created: 4/19/2024 11:34:57 AM
 * Author : yanfuou2
 */ 

#define F_CPU 16000000UL
#define BAUD_RATE 9600
#define BAUD_PRESCALER (((F_CPU / (BAUD_RATE * 16UL))) - 1)

#include <stdlib.h>
#include <stdio.h>
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/io.h>
#include <stdbool.h>
volatile int trigger = 1; 
volatile int state = 0; 
volatile int dist = 0;

volatile bool isCont = true; 
char String[25];

#include "inc/uart.h"

void initialize() {
	UART_init(BAUD_PRESCALER);
	cli();
	sprintf(String, "test\n");
	UART_putstring(String);
	
	DDRD |= (1<<DDD6); //output pin
	DDRD |= (1<<DDD5); //output pin
	DDRB |= (1<<PORTB1); //output pin
	DDRB &= ~(1<<PORTB0); //INPUT pin
	DDRB &= ~(1<<PORTB2); //INPUT pin
	DDRB |= (1<<DDRB1);
	DDRD |= (1<<DDD3);
	DDRB |= (1<<DDB3);

	
	//prescale buzzer control Phase Correct PWM mode by 1024
	TCCR0B |= (1<<CS02);
	TCCR0B &= (1<<CS01);
	TCCR0B |= (1<<CS00);
	
	//SETS OPERATION MODE TO BE PHASE CORRECT MODE
	TCCR0A |= (1<<WGM00);
	TCCR0A &= ~(1<<WGM01);
	TCCR0B |= (1<<WGM02);
	
	//SETS OCCR0A AND OCCR0B
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
	TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0));
	//TIFR0 |= (1<<OCF0A); 
	OCR0A = 157;
	OCR0B = OCR0A * 90.0/100;
	
	//-------------------------timer 3 for ultrasound-----------
		//prescale buzzer control Phase Correct PWM mode by 64
	TCCR2B &= ~(1<<CS22);
	TCCR2B |= (1<<CS21);
	TCCR2B &= ~(1<<CS20);
	
	//SETS OPERATION MODE TO BE PHASE CORRECT MODE
	TCCR2A |= (1<<WGM20);
	TCCR2A &= ~(1<<WGM21);
	TCCR2B |= (1<<WGM22);
	
	//SETS OCCR0A AND OCCR0B
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);
	TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0));
	//TIFR0 |= (1<<OCF0A); 
	OCR2A = 20;
	OCR2B = OCR2A * 50.0/100;
	//-----------------timer1 for interrupt--------------
	TIMSK1 |= (1<<ICIE1);
	TCCR1B |= (1<<CS11);
	TCCR1B |= (1<<ICES1); //sets risin edge
	
	//prescale input captuare clock by 1024
	TCCR1B |= (1<<CS02); 
	TCCR1B &= ~(1<<CS01);
	TCCR1B |= (1<<CS00); 
	state = 0; 
	sei();
}

ISR(TIMER1_CAPT_vect)
{
	if(trigger) {
		TCCR1B &= ~(1<<ICES1); //sets falling edge
		TCNT1 = 0;  
		trigger = 0; 
	} else {
		TCCR1B |= (1<<ICES1); //sets risin edge
		dist = TCNT1/2;
		trigger = 1; 
		sprintf(String, " dist %u\n", dist);
		UART_putstring(String);
		
	}
	
}
int main(void)
{
    /* Replace with your application code */
	initialize(); 
    while (1) 
    {
		
		
		for(int i = 1; i < 6; i++) {
			OCR0B = OCR0A*(100 - i)/100;
			_delay_ms(1000); 
		}
// 		for(int i = 0; i < 12; i++) {
// 			OCR0B = OCR0A*(88 + i)/100;
// 			_delay_ms(2000);
// 		}
    }
}

