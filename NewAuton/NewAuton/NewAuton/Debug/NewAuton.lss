
NewAuton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000010e8  0000117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800140  00800140  000011bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001056  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5d  00000000  00000000  00002346  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a4  00000000  00000000  00002ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000619  00000000  00000000  0000380c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bd  00000000  00000000  00003e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000043e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_10>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e8 ee       	ldi	r30, 0xE8	; 232
      c8:	f0 e1       	ldi	r31, 0x10	; 16
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a0 34       	cpi	r26, 0x40	; 64
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a0 e4       	ldi	r26, 0x40	; 64
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a9 36       	cpi	r26, 0x69	; 105
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 b1 02 	call	0x562	; 0x562 <main>
      ea:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
      f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
      f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
     100:	e2 ec       	ldi	r30, 0xC2	; 194
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	86 e0       	ldi	r24, 0x06	; 6
     106:	80 83       	st	Z, r24
  UCSR0C |= (1<<USBS0); // 2 stop bits
     108:	80 81       	ld	r24, Z
     10a:	88 60       	ori	r24, 0x08	; 8
     10c:	80 83       	st	Z, r24
     10e:	08 95       	ret

00000110 <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
     110:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     114:	95 ff       	sbrs	r25, 5
     116:	fc cf       	rjmp	.-8      	; 0x110 <UART_send>
  // Put data into buffer and send data
  UDR0 = data;
     118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     11c:	08 95       	ret

0000011e <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
     124:	03 c0       	rjmp	.+6      	; 0x12c <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
     126:	0e 94 88 00 	call	0x110	; 0x110 <UART_send>
  StringPtr++;
     12a:	21 96       	adiw	r28, 0x01	; 1
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
     12c:	88 81       	ld	r24, Y
     12e:	81 11       	cpse	r24, r1
     130:	fa cf       	rjmp	.-12     	; 0x126 <UART_putstring+0x8>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
}
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	08 95       	ret

00000138 <initialize>:

volatile int initThresh = 30; 
volatile int finalThresh = 150; 

void initialize() {
	UART_init(BAUD_PRESCALER);
     138:	87 e6       	ldi	r24, 0x67	; 103
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_init>
	cli();
     140:	f8 94       	cli
	
	sprintf(String, "Init\n");
     142:	86 e0       	ldi	r24, 0x06	; 6
     144:	e4 e0       	ldi	r30, 0x04	; 4
     146:	f1 e0       	ldi	r31, 0x01	; 1
     148:	ac e4       	ldi	r26, 0x4C	; 76
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	01 90       	ld	r0, Z+
     14e:	0d 92       	st	X+, r0
     150:	8a 95       	dec	r24
     152:	e1 f7       	brne	.-8      	; 0x14c <initialize+0x14>
	UART_putstring(String);
     154:	8c e4       	ldi	r24, 0x4C	; 76
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
	
	DDRD |= (1<<DDD6); //output pin
     15c:	8a b1       	in	r24, 0x0a	; 10
     15e:	80 64       	ori	r24, 0x40	; 64
     160:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<DDC0);
     162:	87 b1       	in	r24, 0x07	; 7
     164:	81 60       	ori	r24, 0x01	; 1
     166:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDC1);
     168:	87 b1       	in	r24, 0x07	; 7
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	87 b9       	out	0x07, r24	; 7
	//DDRB &= ~(1<<PORTB1); //output pin
	DDRB &= ~(1<<PORTB0); //INPUT pin
     16e:	84 b1       	in	r24, 0x04	; 4
     170:	8e 7f       	andi	r24, 0xFE	; 254
     172:	84 b9       	out	0x04, r24	; 4
	
	DDRD |= (1<<DDD5); //TC 0 --> PD5
     174:	8a b1       	in	r24, 0x0a	; 10
     176:	80 62       	ori	r24, 0x20	; 32
     178:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD3); //TC 2 --> PD3
     17a:	8a b1       	in	r24, 0x0a	; 10
     17c:	88 60       	ori	r24, 0x08	; 8
     17e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD2); //TC 3 --> PD2
     180:	8a b1       	in	r24, 0x0a	; 10
     182:	84 60       	ori	r24, 0x04	; 4
     184:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD0); //TC 3 --> PD0
     186:	8a b1       	in	r24, 0x0a	; 10
     188:	81 60       	ori	r24, 0x01	; 1
     18a:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1); //TC 3 --> PD1
     18c:	8a b1       	in	r24, 0x0a	; 10
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<PORTB2); //TC1 --> PB2
     192:	84 b1       	in	r24, 0x04	; 4
     194:	84 60       	ori	r24, 0x04	; 4
     196:	84 b9       	out	0x04, r24	; 4
	

	//-------------TIMER 0--------------PD5(50Hz for Motor)
	
	//prescale buzzer control Phase Correct PWM mode by 64
	TCCR0B |= (1<<CS02);
     198:	85 b5       	in	r24, 0x25	; 37
     19a:	84 60       	ori	r24, 0x04	; 4
     19c:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     19e:	85 b5       	in	r24, 0x25	; 37
     1a0:	8d 7f       	andi	r24, 0xFD	; 253
     1a2:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
     1a4:	85 b5       	in	r24, 0x25	; 37
     1a6:	81 60       	ori	r24, 0x01	; 1
     1a8:	85 bd       	out	0x25, r24	; 37
	
	//SETS OPERATION MODE TO BE PHASE CORRECT MODE
	TCCR0A |= (1<<WGM00);
     1aa:	84 b5       	in	r24, 0x24	; 36
     1ac:	81 60       	ori	r24, 0x01	; 1
     1ae:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<WGM01);
     1b0:	84 b5       	in	r24, 0x24	; 36
     1b2:	8d 7f       	andi	r24, 0xFD	; 253
     1b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
     1b6:	85 b5       	in	r24, 0x25	; 37
     1b8:	88 60       	ori	r24, 0x08	; 8
     1ba:	85 bd       	out	0x25, r24	; 37
	
	//SETS OCCR0A AND OCCR0B
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
     1bc:	84 b5       	in	r24, 0x24	; 36
     1be:	80 6a       	ori	r24, 0xA0	; 160
     1c0:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0));
     1c2:	84 b5       	in	r24, 0x24	; 36
     1c4:	8f 7a       	andi	r24, 0xAF	; 175
     1c6:	84 bd       	out	0x24, r24	; 36
	//TIFR0 |= (1<<OCF0A); 
	OCR0A = 156;
     1c8:	8c e9       	ldi	r24, 0x9C	; 156
     1ca:	87 bd       	out	0x27, r24	; 39
	OCR0B = OCR0A * 90.0/100;
     1cc:	67 b5       	in	r22, 0x27	; 39
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 67 04 	call	0x8ce	; 0x8ce <__floatsisf>
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	44 eb       	ldi	r20, 0xB4	; 180
     1de:	52 e4       	ldi	r21, 0x42	; 66
     1e0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__mulsf3>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	48 ec       	ldi	r20, 0xC8	; 200
     1ea:	52 e4       	ldi	r21, 0x42	; 66
     1ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__divsf3>
     1f0:	0e 94 36 04 	call	0x86c	; 0x86c <__fixunssfsi>
     1f4:	68 bd       	out	0x28, r22	; 40
	
	//-------------TIMER 2 -------------------PD3(20ns for Ultrasnic sensorTrigger)
	//prescaled by 8
	//CAUTION: DIFFERENT FROM OTHER TIMERS
	TCCR2B &= ~(1<<CS22);
     1f6:	a1 eb       	ldi	r26, 0xB1	; 177
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	8c 91       	ld	r24, X
     1fc:	8b 7f       	andi	r24, 0xFB	; 251
     1fe:	8c 93       	st	X, r24
	TCCR2B |= (1<<CS21);
     200:	8c 91       	ld	r24, X
     202:	82 60       	ori	r24, 0x02	; 2
     204:	8c 93       	st	X, r24
	TCCR2B &= ~(1<<CS20);
     206:	8c 91       	ld	r24, X
     208:	8e 7f       	andi	r24, 0xFE	; 254
     20a:	8c 93       	st	X, r24
		
	//SETS OPERATION MODE TO BE PHASE CORRECT MODE
	TCCR2A |= (1<<WGM20);
     20c:	e0 eb       	ldi	r30, 0xB0	; 176
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	81 60       	ori	r24, 0x01	; 1
     214:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<WGM21);
     216:	80 81       	ld	r24, Z
     218:	8d 7f       	andi	r24, 0xFD	; 253
     21a:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22);
     21c:	8c 91       	ld	r24, X
     21e:	88 60       	ori	r24, 0x08	; 8
     220:	8c 93       	st	X, r24
	
	//SETS OCCR0A AND OCCR0B
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);
     222:	80 81       	ld	r24, Z
     224:	80 6a       	ori	r24, 0xA0	; 160
     226:	80 83       	st	Z, r24
	TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0));
     228:	80 81       	ld	r24, Z
     22a:	8f 7a       	andi	r24, 0xAF	; 175
     22c:	80 83       	st	Z, r24
	//TIFR0 |= (1<<OCF0A); 
	OCR2A = 20; //was 20
     22e:	e3 eb       	ldi	r30, 0xB3	; 179
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	84 e1       	ldi	r24, 0x14	; 20
     234:	80 83       	st	Z, r24
	OCR2B = OCR2A * 50/100;
     236:	80 81       	ld	r24, Z
     238:	22 e3       	ldi	r18, 0x32	; 50
     23a:	82 9f       	mul	r24, r18
     23c:	c0 01       	movw	r24, r0
     23e:	11 24       	eor	r1, r1
     240:	64 e6       	ldi	r22, 0x64	; 100
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
     248:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	
	
	//--------------------TIMER 1---------------PB0(Ultrasonic sensor echo pin)
	//Prescale by 8
	TCCR1B &= ~(1<<CS10);
     24c:	e1 e8       	ldi	r30, 0x81	; 129
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	8e 7f       	andi	r24, 0xFE	; 254
     254:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);
     256:	80 81       	ld	r24, Z
     258:	8d 7f       	andi	r24, 0xFD	; 253
     25a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12);
     25c:	80 81       	ld	r24, Z
     25e:	84 60       	ori	r24, 0x04	; 4
     260:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<ICES1);//Input capture edge select
     262:	80 81       	ld	r24, Z
     264:	80 64       	ori	r24, 0x40	; 64
     266:	80 83       	st	Z, r24
	TIMSK1 |= (1<<ICIE1); //Input capture interrupt enable
     268:	ef e6       	ldi	r30, 0x6F	; 111
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	80 62       	ori	r24, 0x20	; 32
     270:	80 83       	st	Z, r24
	TIFR1 |= (1 << ICF1); //Clear flag
     272:	86 b3       	in	r24, 0x16	; 22
     274:	80 62       	ori	r24, 0x20	; 32
     276:	86 bb       	out	0x16, r24	; 22
	TCCR3A &= ~((1 << COM3A0) | (1 << COM3B0));
	
	OCR3A = 156; //was 20
	OCR3B = OCR3A * 50/100;
*/
	sei();
     278:	78 94       	sei
     27a:	08 95       	ret

0000027c <__vector_10>:
}

ISR(TIMER1_CAPT_vect) // Capture event interrupt
{
     27c:	1f 92       	push	r1
     27e:	0f 92       	push	r0
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
     286:	2f 93       	push	r18
     288:	3f 93       	push	r19
     28a:	4f 93       	push	r20
     28c:	5f 93       	push	r21
     28e:	6f 93       	push	r22
     290:	7f 93       	push	r23
     292:	8f 93       	push	r24
     294:	9f 93       	push	r25
     296:	af 93       	push	r26
     298:	bf 93       	push	r27
     29a:	ef 93       	push	r30
     29c:	ff 93       	push	r31
	if (TCCR1B & (1<<ICES1)) { //If rising edge detected
     29e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     2a2:	86 ff       	sbrs	r24, 6
     2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <__vector_10+0x3c>
		pulseBegin = TCNT1; //Store counter number at beginning 
     2a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     2aa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     2ae:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <pulseBegin+0x1>
     2b2:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <pulseBegin>
     2b6:	4c c0       	rjmp	.+152    	; 0x350 <__vector_10+0xd4>
	}
	else {
		pulseEnd = TCNT1; //Store counter number at end.
     2b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     2bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     2c0:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <pulseEnd+0x1>
     2c4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <pulseEnd>
		if (pulseEnd >= pulseBegin) {
     2c8:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <pulseEnd>
     2cc:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <pulseEnd+0x1>
     2d0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <pulseBegin>
     2d4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <pulseBegin+0x1>
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	7c f0       	brlt	.+30     	; 0x2fc <__vector_10+0x80>
			time = pulseEnd - pulseBegin; //See how many counts elapsed if no overflow occurred
     2de:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <pulseEnd>
     2e2:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <pulseEnd+0x1>
     2e6:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <pulseBegin>
     2ea:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <pulseBegin+0x1>
     2ee:	82 1b       	sub	r24, r18
     2f0:	93 0b       	sbc	r25, r19
     2f2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <time+0x1>
     2f6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <time>
     2fa:	0e c0       	rjmp	.+28     	; 0x318 <__vector_10+0x9c>
		}
		else {
			time = pulseEnd - pulseBegin + 65536; //Add 2^16 = 65536 if overflow occurred since we have 16 bit timer
     2fc:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <pulseEnd>
     300:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <pulseEnd+0x1>
     304:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <pulseBegin>
     308:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <pulseBegin+0x1>
     30c:	82 1b       	sub	r24, r18
     30e:	93 0b       	sbc	r25, r19
     310:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <time+0x1>
     314:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <time>
		}
		distance = time * 0.34/2; //Use the formula from datasheet
     318:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <time>
     31c:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <time+0x1>
     320:	07 2e       	mov	r0, r23
     322:	00 0c       	add	r0, r0
     324:	88 0b       	sbc	r24, r24
     326:	99 0b       	sbc	r25, r25
     328:	0e 94 67 04 	call	0x8ce	; 0x8ce <__floatsisf>
     32c:	2b e7       	ldi	r18, 0x7B	; 123
     32e:	34 e1       	ldi	r19, 0x14	; 20
     330:	4e ea       	ldi	r20, 0xAE	; 174
     332:	5e e3       	ldi	r21, 0x3E	; 62
     334:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__mulsf3>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	5f e3       	ldi	r21, 0x3F	; 63
     340:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__mulsf3>
     344:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
     348:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <distance+0x1>
     34c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <distance>
		//sprintf(String, "dist %d\n", distance);
		//UART_putstring(String);
		
	}
	TIFR1 |= (1<<ICF1); //clear input flag
     350:	86 b3       	in	r24, 0x16	; 22
     352:	80 62       	ori	r24, 0x20	; 32
     354:	86 bb       	out	0x16, r24	; 22
	TCCR1B ^= (1 << ICES1);
     356:	e1 e8       	ldi	r30, 0x81	; 129
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	90 81       	ld	r25, Z
     35c:	80 e4       	ldi	r24, 0x40	; 64
     35e:	89 27       	eor	r24, r25
     360:	80 83       	st	Z, r24
	
}
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	bf 91       	pop	r27
     368:	af 91       	pop	r26
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	7f 91       	pop	r23
     370:	6f 91       	pop	r22
     372:	5f 91       	pop	r21
     374:	4f 91       	pop	r20
     376:	3f 91       	pop	r19
     378:	2f 91       	pop	r18
     37a:	0f 90       	pop	r0
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	0f 90       	pop	r0
     380:	1f 90       	pop	r1
     382:	18 95       	reti

00000384 <max>:
		threshold();
	}
	
}
int max(int x, int y) {
	if (x > y) {
     384:	68 17       	cp	r22, r24
     386:	79 07       	cpc	r23, r25
     388:	14 f0       	brlt	.+4      	; 0x38e <max+0xa>
		return x;
	}
	else {
		return y;
     38a:	86 2f       	mov	r24, r22
     38c:	97 2f       	mov	r25, r23
	}
}
     38e:	08 95       	ret

00000390 <min>:
int min(int x, int y) {
	if (x < y) {
     390:	86 17       	cp	r24, r22
     392:	97 07       	cpc	r25, r23
     394:	14 f0       	brlt	.+4      	; 0x39a <min+0xa>
		return x;
	}
	else {
		return y;
     396:	86 2f       	mov	r24, r22
     398:	97 2f       	mov	r25, r23
	}
}
     39a:	08 95       	ret

0000039c <threshold>:
void threshold() {
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
	int mini = min(initAngle, finalAngle);
     3a8:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <finalAngle>
     3ac:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <finalAngle+0x1>
     3b0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <initAngle>
     3b4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <initAngle+0x1>
     3b8:	0e 94 c8 01 	call	0x390	; 0x390 <min>
     3bc:	8c 01       	movw	r16, r24
	int maxi = max(initAngle, finalAngle);
     3be:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <finalAngle>
     3c2:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <finalAngle+0x1>
     3c6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <initAngle>
     3ca:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <initAngle+0x1>
     3ce:	0e 94 c2 01 	call	0x384	; 0x384 <max>
     3d2:	7c 01       	movw	r14, r24
	sprintf(String, "mini %d \n", mini);
     3d4:	1f 93       	push	r17
     3d6:	0f 93       	push	r16
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	cc e4       	ldi	r28, 0x4C	; 76
     3e2:	d1 e0       	ldi	r29, 0x01	; 1
     3e4:	df 93       	push	r29
     3e6:	cf 93       	push	r28
     3e8:	0e 94 88 05 	call	0xb10	; 0xb10 <sprintf>
	UART_putstring(String);
     3ec:	ce 01       	movw	r24, r28
     3ee:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
	
	sprintf(String, "maxi %d \n", maxi);
     3f2:	ff 92       	push	r15
     3f4:	ef 92       	push	r14
     3f6:	84 e1       	ldi	r24, 0x14	; 20
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	df 93       	push	r29
     400:	cf 93       	push	r28
     402:	0e 94 88 05 	call	0xb10	; 0xb10 <sprintf>
	UART_putstring(String);
     406:	ce 01       	movw	r24, r28
     408:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
	
	sprintf(String, "initThresh %d \n", initThresh);
     40c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <initThresh>
     410:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <initThresh+0x1>
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	8e e1       	ldi	r24, 0x1E	; 30
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	9f 93       	push	r25
     41e:	8f 93       	push	r24
     420:	df 93       	push	r29
     422:	cf 93       	push	r28
     424:	0e 94 88 05 	call	0xb10	; 0xb10 <sprintf>
	UART_putstring(String);
     428:	ce 01       	movw	r24, r28
     42a:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
	
	sprintf(String, "finalThresh %d \n", finalThresh);
     42e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     432:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     436:	9f 93       	push	r25
     438:	8f 93       	push	r24
     43a:	8e e2       	ldi	r24, 0x2E	; 46
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	df 93       	push	r29
     444:	cf 93       	push	r28
     446:	0e 94 88 05 	call	0xb10	; 0xb10 <sprintf>
	UART_putstring(String);
     44a:	ce 01       	movw	r24, r28
     44c:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
	
	if((mini > initThresh) && (maxi < finalThresh)){
     450:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <initThresh>
     454:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <initThresh+0x1>
     458:	2d b7       	in	r18, 0x3d	; 61
     45a:	3e b7       	in	r19, 0x3e	; 62
     45c:	28 5e       	subi	r18, 0xE8	; 232
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	3e bf       	out	0x3e, r19	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	2d bf       	out	0x3d, r18	; 61
     46a:	80 17       	cp	r24, r16
     46c:	91 07       	cpc	r25, r17
     46e:	0c f5       	brge	.+66     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     470:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     474:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     478:	e8 16       	cp	r14, r24
     47a:	f9 06       	cpc	r15, r25
     47c:	d4 f4       	brge	.+52     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		sprintf(String, "l\n\n");
     47e:	8c e6       	ldi	r24, 0x6C	; 108
     480:	9a e0       	ldi	r25, 0x0A	; 10
     482:	99 83       	std	Y+1, r25	; 0x01
     484:	88 83       	st	Y, r24
     486:	8a e0       	ldi	r24, 0x0A	; 10
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	9b 83       	std	Y+3, r25	; 0x03
     48c:	8a 83       	std	Y+2, r24	; 0x02
		UART_putstring(String);
     48e:	ce 01       	movw	r24, r28
     490:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
		PORTC |= (1 << PORTC0);
     494:	88 b1       	in	r24, 0x08	; 8
     496:	81 60       	ori	r24, 0x01	; 1
     498:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49a:	3f ef       	ldi	r19, 0xFF	; 255
     49c:	80 e7       	ldi	r24, 0x70	; 112
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	31 50       	subi	r19, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4aa:	00 00       	nop
		_delay_ms(50);
		PORTC &= ~(1 << PORTC0);
     4ac:	88 b1       	in	r24, 0x08	; 8
     4ae:	8e 7f       	andi	r24, 0xFE	; 254
     4b0:	88 b9       	out	0x08, r24	; 8
	}
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	08 95       	ret

000004c0 <detection>:

void detection()
{
	//sprintf(String, "distance1 %d \n", distance);
	//UART_putstring(String);
	if(distance < 12 && writtenAngle == 0) {
     4c0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <distance>
     4c4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <distance+0x1>
     4c8:	0c 97       	sbiw	r24, 0x0c	; 12
     4ca:	a4 f4       	brge	.+40     	; 0x4f4 <detection+0x34>
     4cc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     4d0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     4d4:	89 2b       	or	r24, r25
     4d6:	71 f4       	brne	.+28     	; 0x4f4 <detection+0x34>
		//stop command
		
		initAngle = angle;
     4d8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <angle>
     4dc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <angle+0x1>
     4e0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <initAngle+0x1>
     4e4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <initAngle>
		writtenAngle = 1; 
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
     4f0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
		
		//DEBUG
		//sprintf(String, "initAngle %d \n", initAngle);
		//UART_putstring(String);
	}
	if(distance >= 12 && writtenAngle == 1) {
     4f4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <distance>
     4f8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <distance+0x1>
     4fc:	0c 97       	sbiw	r24, 0x0c	; 12
     4fe:	44 f1       	brlt	.+80     	; 0x550 <detection+0x90>
     500:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     504:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	11 f5       	brne	.+68     	; 0x550 <detection+0x90>
		finalAngle = angle;
     50c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <angle>
     510:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <angle+0x1>
     514:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <finalAngle+0x1>
     518:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <finalAngle>
		writtenAngle = 0; 
     51c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
     520:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
		sprintf(String, "s\n\n");
     524:	ec e4       	ldi	r30, 0x4C	; 76
     526:	f1 e0       	ldi	r31, 0x01	; 1
     528:	83 e7       	ldi	r24, 0x73	; 115
     52a:	9a e0       	ldi	r25, 0x0A	; 10
     52c:	91 83       	std	Z+1, r25	; 0x01
     52e:	80 83       	st	Z, r24
     530:	8a e0       	ldi	r24, 0x0A	; 10
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	93 83       	std	Z+3, r25	; 0x03
     536:	82 83       	std	Z+2, r24	; 0x02
		UART_putstring(String);
     538:	cf 01       	movw	r24, r30
     53a:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	81 ee       	ldi	r24, 0xE1	; 225
     542:	94 e0       	ldi	r25, 0x04	; 4
     544:	21 50       	subi	r18, 0x01	; 1
     546:	80 40       	sbci	r24, 0x00	; 0
     548:	90 40       	sbci	r25, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <detection+0x84>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <detection+0x8e>
     54e:	00 00       	nop
		_delay_ms(100);
		//DEBUG
		//sprintf(String, "finalAngle %d \n", finalAngle);
		//UART_putstring(String);
	}
	if(distance < 12) {
     550:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <distance>
     554:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <distance+0x1>
     558:	0c 97       	sbiw	r24, 0x0c	; 12
     55a:	14 f4       	brge	.+4      	; 0x560 <detection+0xa0>
		threshold();
     55c:	0e 94 ce 01 	call	0x39c	; 0x39c <threshold>
     560:	08 95       	ret

00000562 <main>:
	}
}
int main(void)
{
    /* Replace with your application code */
	initialize(); 
     562:	0e 94 9c 00 	call	0x138	; 0x138 <initialize>
    while (1) 
    {
		sprintf(String, "f\n\n");
     566:	cc e4       	ldi	r28, 0x4C	; 76
     568:	d1 e0       	ldi	r29, 0x01	; 1
     56a:	86 e6       	ldi	r24, 0x66	; 102
     56c:	9a e0       	ldi	r25, 0x0A	; 10
     56e:	99 83       	std	Y+1, r25	; 0x01
     570:	88 83       	st	Y, r24
     572:	8a e0       	ldi	r24, 0x0A	; 10
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9b 83       	std	Y+3, r25	; 0x03
     578:	8a 83       	std	Y+2, r24	; 0x02
		UART_putstring(String);
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
		PORTC |= (1 << PORTC1);
     580:	88 b1       	in	r24, 0x08	; 8
     582:	82 60       	ori	r24, 0x02	; 2
     584:	88 b9       	out	0x08, r24	; 8
     586:	2f ef       	ldi	r18, 0xFF	; 255
     588:	80 e7       	ldi	r24, 0x70	; 112
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	21 50       	subi	r18, 0x01	; 1
     58e:	80 40       	sbci	r24, 0x00	; 0
     590:	90 40       	sbci	r25, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <main+0x2a>
     594:	00 c0       	rjmp	.+0      	; 0x596 <main+0x34>
     596:	00 00       	nop
		_delay_ms(50);
		PORTC &= ~(1 << PORTC1);
     598:	88 b1       	in	r24, 0x08	; 8
     59a:	8d 7f       	andi	r24, 0xFD	; 253
     59c:	88 b9       	out	0x08, r24	; 8
		sprintf(String, "s\n");
     59e:	83 e7       	ldi	r24, 0x73	; 115
     5a0:	9a e0       	ldi	r25, 0x0A	; 10
     5a2:	99 83       	std	Y+1, r25	; 0x01
     5a4:	88 83       	st	Y, r24
     5a6:	1a 82       	std	Y+2, r1	; 0x02
		UART_putstring(String);
     5a8:	ce 01       	movw	r24, r28
     5aa:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_putstring>
     5ae:	8f e3       	ldi	r24, 0x3F	; 63
     5b0:	9c e9       	ldi	r25, 0x9C	; 156
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <main+0x50>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x56>
     5b8:	00 00       	nop
		_delay_ms(2000);
		
		_delay_ms(2000);
		*/
				
		for(int i = 1; i < 13; i++) {
     5ba:	c1 e0       	ldi	r28, 0x01	; 1
     5bc:	d0 e0       	ldi	r29, 0x00	; 0
     5be:	33 c0       	rjmp	.+102    	; 0x626 <main+0xc4>
			OCR0B = OCR0A*(100 - i)/100;
     5c0:	47 b5       	in	r20, 0x27	; 39
     5c2:	64 e6       	ldi	r22, 0x64	; 100
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	9b 01       	movw	r18, r22
     5c8:	2c 1b       	sub	r18, r28
     5ca:	3d 0b       	sbc	r19, r29
     5cc:	42 9f       	mul	r20, r18
     5ce:	c0 01       	movw	r24, r0
     5d0:	43 9f       	mul	r20, r19
     5d2:	90 0d       	add	r25, r0
     5d4:	11 24       	eor	r1, r1
     5d6:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
     5da:	68 bd       	out	0x28, r22	; 40
			angle = 16.36*i - 16.36;
     5dc:	be 01       	movw	r22, r28
     5de:	0d 2e       	mov	r0, r29
     5e0:	00 0c       	add	r0, r0
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
     5e6:	0e 94 67 04 	call	0x8ce	; 0x8ce <__floatsisf>
     5ea:	28 e4       	ldi	r18, 0x48	; 72
     5ec:	31 ee       	ldi	r19, 0xE1	; 225
     5ee:	42 e8       	ldi	r20, 0x82	; 130
     5f0:	51 e4       	ldi	r21, 0x41	; 65
     5f2:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__mulsf3>
     5f6:	28 e4       	ldi	r18, 0x48	; 72
     5f8:	31 ee       	ldi	r19, 0xE1	; 225
     5fa:	42 e8       	ldi	r20, 0x82	; 130
     5fc:	51 e4       	ldi	r21, 0x41	; 65
     5fe:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__subsf3>
     602:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
     606:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <angle+0x1>
     60a:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <angle>
			detection(); 
     60e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <detection>
     612:	9f ef       	ldi	r25, 0xFF	; 255
     614:	20 e7       	ldi	r18, 0x70	; 112
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	91 50       	subi	r25, 0x01	; 1
     61a:	20 40       	sbci	r18, 0x00	; 0
     61c:	80 40       	sbci	r24, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <main+0xb6>
     620:	00 c0       	rjmp	.+0      	; 0x622 <main+0xc0>
     622:	00 00       	nop
		_delay_ms(2000);
		
		_delay_ms(2000);
		*/
				
		for(int i = 1; i < 13; i++) {
     624:	21 96       	adiw	r28, 0x01	; 1
     626:	cd 30       	cpi	r28, 0x0D	; 13
     628:	d1 05       	cpc	r29, r1
     62a:	54 f2       	brlt	.-108    	; 0x5c0 <main+0x5e>
     62c:	c1 e0       	ldi	r28, 0x01	; 1
     62e:	d0 e0       	ldi	r29, 0x00	; 0
     630:	33 c0       	rjmp	.+102    	; 0x698 <main+0x136>
		//	sprintf(String, "OCR0B %d \n", OCR0B);
		//	UART_putstring(String);
		}
		
		for(int i = 1; i < 13; i++) {
			OCR0B = OCR0A*(88 + i)/100;
     632:	47 b5       	in	r20, 0x27	; 39
     634:	9e 01       	movw	r18, r28
     636:	28 5a       	subi	r18, 0xA8	; 168
     638:	3f 4f       	sbci	r19, 0xFF	; 255
     63a:	42 9f       	mul	r20, r18
     63c:	c0 01       	movw	r24, r0
     63e:	43 9f       	mul	r20, r19
     640:	90 0d       	add	r25, r0
     642:	11 24       	eor	r1, r1
     644:	64 e6       	ldi	r22, 0x64	; 100
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	0e 94 60 05 	call	0xac0	; 0xac0 <__divmodhi4>
     64c:	68 bd       	out	0x28, r22	; 40
			angle = 16.36*i - 16.36;
     64e:	be 01       	movw	r22, r28
     650:	0d 2e       	mov	r0, r29
     652:	00 0c       	add	r0, r0
     654:	88 0b       	sbc	r24, r24
     656:	99 0b       	sbc	r25, r25
     658:	0e 94 67 04 	call	0x8ce	; 0x8ce <__floatsisf>
     65c:	28 e4       	ldi	r18, 0x48	; 72
     65e:	31 ee       	ldi	r19, 0xE1	; 225
     660:	42 e8       	ldi	r20, 0x82	; 130
     662:	51 e4       	ldi	r21, 0x41	; 65
     664:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__mulsf3>
     668:	28 e4       	ldi	r18, 0x48	; 72
     66a:	31 ee       	ldi	r19, 0xE1	; 225
     66c:	42 e8       	ldi	r20, 0x82	; 130
     66e:	51 e4       	ldi	r21, 0x41	; 65
     670:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__subsf3>
     674:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
     678:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <angle+0x1>
     67c:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <angle>
			detection(); 
     680:	0e 94 60 02 	call	0x4c0	; 0x4c0 <detection>
     684:	9f ef       	ldi	r25, 0xFF	; 255
     686:	20 e7       	ldi	r18, 0x70	; 112
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	91 50       	subi	r25, 0x01	; 1
     68c:	20 40       	sbci	r18, 0x00	; 0
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	e1 f7       	brne	.-8      	; 0x68a <main+0x128>
     692:	00 c0       	rjmp	.+0      	; 0x694 <main+0x132>
     694:	00 00       	nop
			_delay_ms(50);
		//	sprintf(String, "OCR0B %d \n", OCR0B);
		//	UART_putstring(String);
		}
		
		for(int i = 1; i < 13; i++) {
     696:	21 96       	adiw	r28, 0x01	; 1
     698:	cd 30       	cpi	r28, 0x0D	; 13
     69a:	d1 05       	cpc	r29, r1
     69c:	54 f2       	brlt	.-108    	; 0x632 <main+0xd0>
     69e:	63 cf       	rjmp	.-314    	; 0x566 <main+0x4>

000006a0 <__subsf3>:
     6a0:	50 58       	subi	r21, 0x80	; 128

000006a2 <__addsf3>:
     6a2:	bb 27       	eor	r27, r27
     6a4:	aa 27       	eor	r26, r26
     6a6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__addsf3x>
     6aa:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_round>
     6ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_pscA>
     6b2:	38 f0       	brcs	.+14     	; 0x6c2 <__addsf3+0x20>
     6b4:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_pscB>
     6b8:	20 f0       	brcs	.+8      	; 0x6c2 <__addsf3+0x20>
     6ba:	39 f4       	brne	.+14     	; 0x6ca <__addsf3+0x28>
     6bc:	9f 3f       	cpi	r25, 0xFF	; 255
     6be:	19 f4       	brne	.+6      	; 0x6c6 <__addsf3+0x24>
     6c0:	26 f4       	brtc	.+8      	; 0x6ca <__addsf3+0x28>
     6c2:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_nan>
     6c6:	0e f4       	brtc	.+2      	; 0x6ca <__addsf3+0x28>
     6c8:	e0 95       	com	r30
     6ca:	e7 fb       	bst	r30, 7
     6cc:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_inf>

000006d0 <__addsf3x>:
     6d0:	e9 2f       	mov	r30, r25
     6d2:	0e 94 ca 04 	call	0x994	; 0x994 <__fp_split3>
     6d6:	58 f3       	brcs	.-42     	; 0x6ae <__addsf3+0xc>
     6d8:	ba 17       	cp	r27, r26
     6da:	62 07       	cpc	r22, r18
     6dc:	73 07       	cpc	r23, r19
     6de:	84 07       	cpc	r24, r20
     6e0:	95 07       	cpc	r25, r21
     6e2:	20 f0       	brcs	.+8      	; 0x6ec <__addsf3x+0x1c>
     6e4:	79 f4       	brne	.+30     	; 0x704 <__addsf3x+0x34>
     6e6:	a6 f5       	brtc	.+104    	; 0x750 <__addsf3x+0x80>
     6e8:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_zero>
     6ec:	0e f4       	brtc	.+2      	; 0x6f0 <__addsf3x+0x20>
     6ee:	e0 95       	com	r30
     6f0:	0b 2e       	mov	r0, r27
     6f2:	ba 2f       	mov	r27, r26
     6f4:	a0 2d       	mov	r26, r0
     6f6:	0b 01       	movw	r0, r22
     6f8:	b9 01       	movw	r22, r18
     6fa:	90 01       	movw	r18, r0
     6fc:	0c 01       	movw	r0, r24
     6fe:	ca 01       	movw	r24, r20
     700:	a0 01       	movw	r20, r0
     702:	11 24       	eor	r1, r1
     704:	ff 27       	eor	r31, r31
     706:	59 1b       	sub	r21, r25
     708:	99 f0       	breq	.+38     	; 0x730 <__addsf3x+0x60>
     70a:	59 3f       	cpi	r21, 0xF9	; 249
     70c:	50 f4       	brcc	.+20     	; 0x722 <__addsf3x+0x52>
     70e:	50 3e       	cpi	r21, 0xE0	; 224
     710:	68 f1       	brcs	.+90     	; 0x76c <__addsf3x+0x9c>
     712:	1a 16       	cp	r1, r26
     714:	f0 40       	sbci	r31, 0x00	; 0
     716:	a2 2f       	mov	r26, r18
     718:	23 2f       	mov	r18, r19
     71a:	34 2f       	mov	r19, r20
     71c:	44 27       	eor	r20, r20
     71e:	58 5f       	subi	r21, 0xF8	; 248
     720:	f3 cf       	rjmp	.-26     	; 0x708 <__addsf3x+0x38>
     722:	46 95       	lsr	r20
     724:	37 95       	ror	r19
     726:	27 95       	ror	r18
     728:	a7 95       	ror	r26
     72a:	f0 40       	sbci	r31, 0x00	; 0
     72c:	53 95       	inc	r21
     72e:	c9 f7       	brne	.-14     	; 0x722 <__addsf3x+0x52>
     730:	7e f4       	brtc	.+30     	; 0x750 <__addsf3x+0x80>
     732:	1f 16       	cp	r1, r31
     734:	ba 0b       	sbc	r27, r26
     736:	62 0b       	sbc	r22, r18
     738:	73 0b       	sbc	r23, r19
     73a:	84 0b       	sbc	r24, r20
     73c:	ba f0       	brmi	.+46     	; 0x76c <__addsf3x+0x9c>
     73e:	91 50       	subi	r25, 0x01	; 1
     740:	a1 f0       	breq	.+40     	; 0x76a <__addsf3x+0x9a>
     742:	ff 0f       	add	r31, r31
     744:	bb 1f       	adc	r27, r27
     746:	66 1f       	adc	r22, r22
     748:	77 1f       	adc	r23, r23
     74a:	88 1f       	adc	r24, r24
     74c:	c2 f7       	brpl	.-16     	; 0x73e <__addsf3x+0x6e>
     74e:	0e c0       	rjmp	.+28     	; 0x76c <__addsf3x+0x9c>
     750:	ba 0f       	add	r27, r26
     752:	62 1f       	adc	r22, r18
     754:	73 1f       	adc	r23, r19
     756:	84 1f       	adc	r24, r20
     758:	48 f4       	brcc	.+18     	; 0x76c <__addsf3x+0x9c>
     75a:	87 95       	ror	r24
     75c:	77 95       	ror	r23
     75e:	67 95       	ror	r22
     760:	b7 95       	ror	r27
     762:	f7 95       	ror	r31
     764:	9e 3f       	cpi	r25, 0xFE	; 254
     766:	08 f0       	brcs	.+2      	; 0x76a <__addsf3x+0x9a>
     768:	b0 cf       	rjmp	.-160    	; 0x6ca <__addsf3+0x28>
     76a:	93 95       	inc	r25
     76c:	88 0f       	add	r24, r24
     76e:	08 f0       	brcs	.+2      	; 0x772 <__addsf3x+0xa2>
     770:	99 27       	eor	r25, r25
     772:	ee 0f       	add	r30, r30
     774:	97 95       	ror	r25
     776:	87 95       	ror	r24
     778:	08 95       	ret

0000077a <__divsf3>:
     77a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divsf3x>
     77e:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_round>
     782:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_pscB>
     786:	58 f0       	brcs	.+22     	; 0x79e <__divsf3+0x24>
     788:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_pscA>
     78c:	40 f0       	brcs	.+16     	; 0x79e <__divsf3+0x24>
     78e:	29 f4       	brne	.+10     	; 0x79a <__divsf3+0x20>
     790:	5f 3f       	cpi	r21, 0xFF	; 255
     792:	29 f0       	breq	.+10     	; 0x79e <__divsf3+0x24>
     794:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_inf>
     798:	51 11       	cpse	r21, r1
     79a:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_szero>
     79e:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_nan>

000007a2 <__divsf3x>:
     7a2:	0e 94 ca 04 	call	0x994	; 0x994 <__fp_split3>
     7a6:	68 f3       	brcs	.-38     	; 0x782 <__divsf3+0x8>

000007a8 <__divsf3_pse>:
     7a8:	99 23       	and	r25, r25
     7aa:	b1 f3       	breq	.-20     	; 0x798 <__divsf3+0x1e>
     7ac:	55 23       	and	r21, r21
     7ae:	91 f3       	breq	.-28     	; 0x794 <__divsf3+0x1a>
     7b0:	95 1b       	sub	r25, r21
     7b2:	55 0b       	sbc	r21, r21
     7b4:	bb 27       	eor	r27, r27
     7b6:	aa 27       	eor	r26, r26
     7b8:	62 17       	cp	r22, r18
     7ba:	73 07       	cpc	r23, r19
     7bc:	84 07       	cpc	r24, r20
     7be:	38 f0       	brcs	.+14     	; 0x7ce <__divsf3_pse+0x26>
     7c0:	9f 5f       	subi	r25, 0xFF	; 255
     7c2:	5f 4f       	sbci	r21, 0xFF	; 255
     7c4:	22 0f       	add	r18, r18
     7c6:	33 1f       	adc	r19, r19
     7c8:	44 1f       	adc	r20, r20
     7ca:	aa 1f       	adc	r26, r26
     7cc:	a9 f3       	breq	.-22     	; 0x7b8 <__divsf3_pse+0x10>
     7ce:	35 d0       	rcall	.+106    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     7d0:	0e 2e       	mov	r0, r30
     7d2:	3a f0       	brmi	.+14     	; 0x7e2 <__divsf3_pse+0x3a>
     7d4:	e0 e8       	ldi	r30, 0x80	; 128
     7d6:	32 d0       	rcall	.+100    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     7d8:	91 50       	subi	r25, 0x01	; 1
     7da:	50 40       	sbci	r21, 0x00	; 0
     7dc:	e6 95       	lsr	r30
     7de:	00 1c       	adc	r0, r0
     7e0:	ca f7       	brpl	.-14     	; 0x7d4 <__divsf3_pse+0x2c>
     7e2:	2b d0       	rcall	.+86     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     7e4:	fe 2f       	mov	r31, r30
     7e6:	29 d0       	rcall	.+82     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     7e8:	66 0f       	add	r22, r22
     7ea:	77 1f       	adc	r23, r23
     7ec:	88 1f       	adc	r24, r24
     7ee:	bb 1f       	adc	r27, r27
     7f0:	26 17       	cp	r18, r22
     7f2:	37 07       	cpc	r19, r23
     7f4:	48 07       	cpc	r20, r24
     7f6:	ab 07       	cpc	r26, r27
     7f8:	b0 e8       	ldi	r27, 0x80	; 128
     7fa:	09 f0       	breq	.+2      	; 0x7fe <__divsf3_pse+0x56>
     7fc:	bb 0b       	sbc	r27, r27
     7fe:	80 2d       	mov	r24, r0
     800:	bf 01       	movw	r22, r30
     802:	ff 27       	eor	r31, r31
     804:	93 58       	subi	r25, 0x83	; 131
     806:	5f 4f       	sbci	r21, 0xFF	; 255
     808:	3a f0       	brmi	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     80a:	9e 3f       	cpi	r25, 0xFE	; 254
     80c:	51 05       	cpc	r21, r1
     80e:	78 f0       	brcs	.+30     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     810:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_inf>
     814:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_szero>
     818:	5f 3f       	cpi	r21, 0xFF	; 255
     81a:	e4 f3       	brlt	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	98 3e       	cpi	r25, 0xE8	; 232
     81e:	d4 f3       	brlt	.-12     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     820:	86 95       	lsr	r24
     822:	77 95       	ror	r23
     824:	67 95       	ror	r22
     826:	b7 95       	ror	r27
     828:	f7 95       	ror	r31
     82a:	9f 5f       	subi	r25, 0xFF	; 255
     82c:	c9 f7       	brne	.-14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     82e:	88 0f       	add	r24, r24
     830:	91 1d       	adc	r25, r1
     832:	96 95       	lsr	r25
     834:	87 95       	ror	r24
     836:	97 f9       	bld	r25, 7
     838:	08 95       	ret
     83a:	e1 e0       	ldi	r30, 0x01	; 1
     83c:	66 0f       	add	r22, r22
     83e:	77 1f       	adc	r23, r23
     840:	88 1f       	adc	r24, r24
     842:	bb 1f       	adc	r27, r27
     844:	62 17       	cp	r22, r18
     846:	73 07       	cpc	r23, r19
     848:	84 07       	cpc	r24, r20
     84a:	ba 07       	cpc	r27, r26
     84c:	20 f0       	brcs	.+8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     84e:	62 1b       	sub	r22, r18
     850:	73 0b       	sbc	r23, r19
     852:	84 0b       	sbc	r24, r20
     854:	ba 0b       	sbc	r27, r26
     856:	ee 1f       	adc	r30, r30
     858:	88 f7       	brcc	.-30     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     85a:	e0 95       	com	r30
     85c:	08 95       	ret

0000085e <__fixsfsi>:
     85e:	0e 94 36 04 	call	0x86c	; 0x86c <__fixunssfsi>
     862:	68 94       	set
     864:	b1 11       	cpse	r27, r1
     866:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_szero>
     86a:	08 95       	ret

0000086c <__fixunssfsi>:
     86c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fp_splitA>
     870:	88 f0       	brcs	.+34     	; 0x894 <__fixunssfsi+0x28>
     872:	9f 57       	subi	r25, 0x7F	; 127
     874:	98 f0       	brcs	.+38     	; 0x89c <__fixunssfsi+0x30>
     876:	b9 2f       	mov	r27, r25
     878:	99 27       	eor	r25, r25
     87a:	b7 51       	subi	r27, 0x17	; 23
     87c:	b0 f0       	brcs	.+44     	; 0x8aa <__fixunssfsi+0x3e>
     87e:	e1 f0       	breq	.+56     	; 0x8b8 <__fixunssfsi+0x4c>
     880:	66 0f       	add	r22, r22
     882:	77 1f       	adc	r23, r23
     884:	88 1f       	adc	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	1a f0       	brmi	.+6      	; 0x890 <__fixunssfsi+0x24>
     88a:	ba 95       	dec	r27
     88c:	c9 f7       	brne	.-14     	; 0x880 <__fixunssfsi+0x14>
     88e:	14 c0       	rjmp	.+40     	; 0x8b8 <__fixunssfsi+0x4c>
     890:	b1 30       	cpi	r27, 0x01	; 1
     892:	91 f0       	breq	.+36     	; 0x8b8 <__fixunssfsi+0x4c>
     894:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_zero>
     898:	b1 e0       	ldi	r27, 0x01	; 1
     89a:	08 95       	ret
     89c:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_zero>
     8a0:	67 2f       	mov	r22, r23
     8a2:	78 2f       	mov	r23, r24
     8a4:	88 27       	eor	r24, r24
     8a6:	b8 5f       	subi	r27, 0xF8	; 248
     8a8:	39 f0       	breq	.+14     	; 0x8b8 <__fixunssfsi+0x4c>
     8aa:	b9 3f       	cpi	r27, 0xF9	; 249
     8ac:	cc f3       	brlt	.-14     	; 0x8a0 <__fixunssfsi+0x34>
     8ae:	86 95       	lsr	r24
     8b0:	77 95       	ror	r23
     8b2:	67 95       	ror	r22
     8b4:	b3 95       	inc	r27
     8b6:	d9 f7       	brne	.-10     	; 0x8ae <__fixunssfsi+0x42>
     8b8:	3e f4       	brtc	.+14     	; 0x8c8 <__fixunssfsi+0x5c>
     8ba:	90 95       	com	r25
     8bc:	80 95       	com	r24
     8be:	70 95       	com	r23
     8c0:	61 95       	neg	r22
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	8f 4f       	sbci	r24, 0xFF	; 255
     8c6:	9f 4f       	sbci	r25, 0xFF	; 255
     8c8:	08 95       	ret

000008ca <__floatunsisf>:
     8ca:	e8 94       	clt
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__floatsisf+0x12>

000008ce <__floatsisf>:
     8ce:	97 fb       	bst	r25, 7
     8d0:	3e f4       	brtc	.+14     	; 0x8e0 <__floatsisf+0x12>
     8d2:	90 95       	com	r25
     8d4:	80 95       	com	r24
     8d6:	70 95       	com	r23
     8d8:	61 95       	neg	r22
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	8f 4f       	sbci	r24, 0xFF	; 255
     8de:	9f 4f       	sbci	r25, 0xFF	; 255
     8e0:	99 23       	and	r25, r25
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__stack+0xf>
     8e4:	f9 2f       	mov	r31, r25
     8e6:	96 e9       	ldi	r25, 0x96	; 150
     8e8:	bb 27       	eor	r27, r27
     8ea:	93 95       	inc	r25
     8ec:	f6 95       	lsr	r31
     8ee:	87 95       	ror	r24
     8f0:	77 95       	ror	r23
     8f2:	67 95       	ror	r22
     8f4:	b7 95       	ror	r27
     8f6:	f1 11       	cpse	r31, r1
     8f8:	f8 cf       	rjmp	.-16     	; 0x8ea <__floatsisf+0x1c>
     8fa:	fa f4       	brpl	.+62     	; 0x93a <__stack+0x3b>
     8fc:	bb 0f       	add	r27, r27
     8fe:	11 f4       	brne	.+4      	; 0x904 <__stack+0x5>
     900:	60 ff       	sbrs	r22, 0
     902:	1b c0       	rjmp	.+54     	; 0x93a <__stack+0x3b>
     904:	6f 5f       	subi	r22, 0xFF	; 255
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	8f 4f       	sbci	r24, 0xFF	; 255
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	16 c0       	rjmp	.+44     	; 0x93a <__stack+0x3b>
     90e:	88 23       	and	r24, r24
     910:	11 f0       	breq	.+4      	; 0x916 <__stack+0x17>
     912:	96 e9       	ldi	r25, 0x96	; 150
     914:	11 c0       	rjmp	.+34     	; 0x938 <__stack+0x39>
     916:	77 23       	and	r23, r23
     918:	21 f0       	breq	.+8      	; 0x922 <__stack+0x23>
     91a:	9e e8       	ldi	r25, 0x8E	; 142
     91c:	87 2f       	mov	r24, r23
     91e:	76 2f       	mov	r23, r22
     920:	05 c0       	rjmp	.+10     	; 0x92c <__stack+0x2d>
     922:	66 23       	and	r22, r22
     924:	71 f0       	breq	.+28     	; 0x942 <__stack+0x43>
     926:	96 e8       	ldi	r25, 0x86	; 134
     928:	86 2f       	mov	r24, r22
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	2a f0       	brmi	.+10     	; 0x93a <__stack+0x3b>
     930:	9a 95       	dec	r25
     932:	66 0f       	add	r22, r22
     934:	77 1f       	adc	r23, r23
     936:	88 1f       	adc	r24, r24
     938:	da f7       	brpl	.-10     	; 0x930 <__stack+0x31>
     93a:	88 0f       	add	r24, r24
     93c:	96 95       	lsr	r25
     93e:	87 95       	ror	r24
     940:	97 f9       	bld	r25, 7
     942:	08 95       	ret

00000944 <__fp_inf>:
     944:	97 f9       	bld	r25, 7
     946:	9f 67       	ori	r25, 0x7F	; 127
     948:	80 e8       	ldi	r24, 0x80	; 128
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	08 95       	ret

00000950 <__fp_nan>:
     950:	9f ef       	ldi	r25, 0xFF	; 255
     952:	80 ec       	ldi	r24, 0xC0	; 192
     954:	08 95       	ret

00000956 <__fp_pscA>:
     956:	00 24       	eor	r0, r0
     958:	0a 94       	dec	r0
     95a:	16 16       	cp	r1, r22
     95c:	17 06       	cpc	r1, r23
     95e:	18 06       	cpc	r1, r24
     960:	09 06       	cpc	r0, r25
     962:	08 95       	ret

00000964 <__fp_pscB>:
     964:	00 24       	eor	r0, r0
     966:	0a 94       	dec	r0
     968:	12 16       	cp	r1, r18
     96a:	13 06       	cpc	r1, r19
     96c:	14 06       	cpc	r1, r20
     96e:	05 06       	cpc	r0, r21
     970:	08 95       	ret

00000972 <__fp_round>:
     972:	09 2e       	mov	r0, r25
     974:	03 94       	inc	r0
     976:	00 0c       	add	r0, r0
     978:	11 f4       	brne	.+4      	; 0x97e <__fp_round+0xc>
     97a:	88 23       	and	r24, r24
     97c:	52 f0       	brmi	.+20     	; 0x992 <__fp_round+0x20>
     97e:	bb 0f       	add	r27, r27
     980:	40 f4       	brcc	.+16     	; 0x992 <__fp_round+0x20>
     982:	bf 2b       	or	r27, r31
     984:	11 f4       	brne	.+4      	; 0x98a <__fp_round+0x18>
     986:	60 ff       	sbrs	r22, 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <__fp_round+0x20>
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	8f 4f       	sbci	r24, 0xFF	; 255
     990:	9f 4f       	sbci	r25, 0xFF	; 255
     992:	08 95       	ret

00000994 <__fp_split3>:
     994:	57 fd       	sbrc	r21, 7
     996:	90 58       	subi	r25, 0x80	; 128
     998:	44 0f       	add	r20, r20
     99a:	55 1f       	adc	r21, r21
     99c:	59 f0       	breq	.+22     	; 0x9b4 <__fp_splitA+0x10>
     99e:	5f 3f       	cpi	r21, 0xFF	; 255
     9a0:	71 f0       	breq	.+28     	; 0x9be <__fp_splitA+0x1a>
     9a2:	47 95       	ror	r20

000009a4 <__fp_splitA>:
     9a4:	88 0f       	add	r24, r24
     9a6:	97 fb       	bst	r25, 7
     9a8:	99 1f       	adc	r25, r25
     9aa:	61 f0       	breq	.+24     	; 0x9c4 <__fp_splitA+0x20>
     9ac:	9f 3f       	cpi	r25, 0xFF	; 255
     9ae:	79 f0       	breq	.+30     	; 0x9ce <__fp_splitA+0x2a>
     9b0:	87 95       	ror	r24
     9b2:	08 95       	ret
     9b4:	12 16       	cp	r1, r18
     9b6:	13 06       	cpc	r1, r19
     9b8:	14 06       	cpc	r1, r20
     9ba:	55 1f       	adc	r21, r21
     9bc:	f2 cf       	rjmp	.-28     	; 0x9a2 <__fp_split3+0xe>
     9be:	46 95       	lsr	r20
     9c0:	f1 df       	rcall	.-30     	; 0x9a4 <__fp_splitA>
     9c2:	08 c0       	rjmp	.+16     	; 0x9d4 <__fp_splitA+0x30>
     9c4:	16 16       	cp	r1, r22
     9c6:	17 06       	cpc	r1, r23
     9c8:	18 06       	cpc	r1, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	f1 cf       	rjmp	.-30     	; 0x9b0 <__fp_splitA+0xc>
     9ce:	86 95       	lsr	r24
     9d0:	71 05       	cpc	r23, r1
     9d2:	61 05       	cpc	r22, r1
     9d4:	08 94       	sec
     9d6:	08 95       	ret

000009d8 <__fp_zero>:
     9d8:	e8 94       	clt

000009da <__fp_szero>:
     9da:	bb 27       	eor	r27, r27
     9dc:	66 27       	eor	r22, r22
     9de:	77 27       	eor	r23, r23
     9e0:	cb 01       	movw	r24, r22
     9e2:	97 f9       	bld	r25, 7
     9e4:	08 95       	ret

000009e6 <__mulsf3>:
     9e6:	0e 94 06 05 	call	0xa0c	; 0xa0c <__mulsf3x>
     9ea:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_round>
     9ee:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_pscA>
     9f2:	38 f0       	brcs	.+14     	; 0xa02 <__mulsf3+0x1c>
     9f4:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_pscB>
     9f8:	20 f0       	brcs	.+8      	; 0xa02 <__mulsf3+0x1c>
     9fa:	95 23       	and	r25, r21
     9fc:	11 f0       	breq	.+4      	; 0xa02 <__mulsf3+0x1c>
     9fe:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_inf>
     a02:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_nan>
     a06:	11 24       	eor	r1, r1
     a08:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_szero>

00000a0c <__mulsf3x>:
     a0c:	0e 94 ca 04 	call	0x994	; 0x994 <__fp_split3>
     a10:	70 f3       	brcs	.-36     	; 0x9ee <__mulsf3+0x8>

00000a12 <__mulsf3_pse>:
     a12:	95 9f       	mul	r25, r21
     a14:	c1 f3       	breq	.-16     	; 0xa06 <__mulsf3+0x20>
     a16:	95 0f       	add	r25, r21
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	55 1f       	adc	r21, r21
     a1c:	62 9f       	mul	r22, r18
     a1e:	f0 01       	movw	r30, r0
     a20:	72 9f       	mul	r23, r18
     a22:	bb 27       	eor	r27, r27
     a24:	f0 0d       	add	r31, r0
     a26:	b1 1d       	adc	r27, r1
     a28:	63 9f       	mul	r22, r19
     a2a:	aa 27       	eor	r26, r26
     a2c:	f0 0d       	add	r31, r0
     a2e:	b1 1d       	adc	r27, r1
     a30:	aa 1f       	adc	r26, r26
     a32:	64 9f       	mul	r22, r20
     a34:	66 27       	eor	r22, r22
     a36:	b0 0d       	add	r27, r0
     a38:	a1 1d       	adc	r26, r1
     a3a:	66 1f       	adc	r22, r22
     a3c:	82 9f       	mul	r24, r18
     a3e:	22 27       	eor	r18, r18
     a40:	b0 0d       	add	r27, r0
     a42:	a1 1d       	adc	r26, r1
     a44:	62 1f       	adc	r22, r18
     a46:	73 9f       	mul	r23, r19
     a48:	b0 0d       	add	r27, r0
     a4a:	a1 1d       	adc	r26, r1
     a4c:	62 1f       	adc	r22, r18
     a4e:	83 9f       	mul	r24, r19
     a50:	a0 0d       	add	r26, r0
     a52:	61 1d       	adc	r22, r1
     a54:	22 1f       	adc	r18, r18
     a56:	74 9f       	mul	r23, r20
     a58:	33 27       	eor	r19, r19
     a5a:	a0 0d       	add	r26, r0
     a5c:	61 1d       	adc	r22, r1
     a5e:	23 1f       	adc	r18, r19
     a60:	84 9f       	mul	r24, r20
     a62:	60 0d       	add	r22, r0
     a64:	21 1d       	adc	r18, r1
     a66:	82 2f       	mov	r24, r18
     a68:	76 2f       	mov	r23, r22
     a6a:	6a 2f       	mov	r22, r26
     a6c:	11 24       	eor	r1, r1
     a6e:	9f 57       	subi	r25, 0x7F	; 127
     a70:	50 40       	sbci	r21, 0x00	; 0
     a72:	9a f0       	brmi	.+38     	; 0xa9a <__mulsf3_pse+0x88>
     a74:	f1 f0       	breq	.+60     	; 0xab2 <__mulsf3_pse+0xa0>
     a76:	88 23       	and	r24, r24
     a78:	4a f0       	brmi	.+18     	; 0xa8c <__mulsf3_pse+0x7a>
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	bb 1f       	adc	r27, r27
     a80:	66 1f       	adc	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	88 1f       	adc	r24, r24
     a86:	91 50       	subi	r25, 0x01	; 1
     a88:	50 40       	sbci	r21, 0x00	; 0
     a8a:	a9 f7       	brne	.-22     	; 0xa76 <__mulsf3_pse+0x64>
     a8c:	9e 3f       	cpi	r25, 0xFE	; 254
     a8e:	51 05       	cpc	r21, r1
     a90:	80 f0       	brcs	.+32     	; 0xab2 <__mulsf3_pse+0xa0>
     a92:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_inf>
     a96:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_szero>
     a9a:	5f 3f       	cpi	r21, 0xFF	; 255
     a9c:	e4 f3       	brlt	.-8      	; 0xa96 <__mulsf3_pse+0x84>
     a9e:	98 3e       	cpi	r25, 0xE8	; 232
     aa0:	d4 f3       	brlt	.-12     	; 0xa96 <__mulsf3_pse+0x84>
     aa2:	86 95       	lsr	r24
     aa4:	77 95       	ror	r23
     aa6:	67 95       	ror	r22
     aa8:	b7 95       	ror	r27
     aaa:	f7 95       	ror	r31
     aac:	e7 95       	ror	r30
     aae:	9f 5f       	subi	r25, 0xFF	; 255
     ab0:	c1 f7       	brne	.-16     	; 0xaa2 <__mulsf3_pse+0x90>
     ab2:	fe 2b       	or	r31, r30
     ab4:	88 0f       	add	r24, r24
     ab6:	91 1d       	adc	r25, r1
     ab8:	96 95       	lsr	r25
     aba:	87 95       	ror	r24
     abc:	97 f9       	bld	r25, 7
     abe:	08 95       	ret

00000ac0 <__divmodhi4>:
     ac0:	97 fb       	bst	r25, 7
     ac2:	07 2e       	mov	r0, r23
     ac4:	16 f4       	brtc	.+4      	; 0xaca <__divmodhi4+0xa>
     ac6:	00 94       	com	r0
     ac8:	07 d0       	rcall	.+14     	; 0xad8 <__divmodhi4_neg1>
     aca:	77 fd       	sbrc	r23, 7
     acc:	09 d0       	rcall	.+18     	; 0xae0 <__divmodhi4_neg2>
     ace:	0e 94 74 05 	call	0xae8	; 0xae8 <__udivmodhi4>
     ad2:	07 fc       	sbrc	r0, 7
     ad4:	05 d0       	rcall	.+10     	; 0xae0 <__divmodhi4_neg2>
     ad6:	3e f4       	brtc	.+14     	; 0xae6 <__divmodhi4_exit>

00000ad8 <__divmodhi4_neg1>:
     ad8:	90 95       	com	r25
     ada:	81 95       	neg	r24
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	08 95       	ret

00000ae0 <__divmodhi4_neg2>:
     ae0:	70 95       	com	r23
     ae2:	61 95       	neg	r22
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ae6 <__divmodhi4_exit>:
     ae6:	08 95       	ret

00000ae8 <__udivmodhi4>:
     ae8:	aa 1b       	sub	r26, r26
     aea:	bb 1b       	sub	r27, r27
     aec:	51 e1       	ldi	r21, 0x11	; 17
     aee:	07 c0       	rjmp	.+14     	; 0xafe <__udivmodhi4_ep>

00000af0 <__udivmodhi4_loop>:
     af0:	aa 1f       	adc	r26, r26
     af2:	bb 1f       	adc	r27, r27
     af4:	a6 17       	cp	r26, r22
     af6:	b7 07       	cpc	r27, r23
     af8:	10 f0       	brcs	.+4      	; 0xafe <__udivmodhi4_ep>
     afa:	a6 1b       	sub	r26, r22
     afc:	b7 0b       	sbc	r27, r23

00000afe <__udivmodhi4_ep>:
     afe:	88 1f       	adc	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	5a 95       	dec	r21
     b04:	a9 f7       	brne	.-22     	; 0xaf0 <__udivmodhi4_loop>
     b06:	80 95       	com	r24
     b08:	90 95       	com	r25
     b0a:	bc 01       	movw	r22, r24
     b0c:	cd 01       	movw	r24, r26
     b0e:	08 95       	ret

00000b10 <sprintf>:
     b10:	ae e0       	ldi	r26, 0x0E	; 14
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	ee e8       	ldi	r30, 0x8E	; 142
     b16:	f5 e0       	ldi	r31, 0x05	; 5
     b18:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__prologue_saves__+0x1c>
     b1c:	0d 89       	ldd	r16, Y+21	; 0x15
     b1e:	1e 89       	ldd	r17, Y+22	; 0x16
     b20:	86 e0       	ldi	r24, 0x06	; 6
     b22:	8c 83       	std	Y+4, r24	; 0x04
     b24:	1a 83       	std	Y+2, r17	; 0x02
     b26:	09 83       	std	Y+1, r16	; 0x01
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	9f e7       	ldi	r25, 0x7F	; 127
     b2c:	9e 83       	std	Y+6, r25	; 0x06
     b2e:	8d 83       	std	Y+5, r24	; 0x05
     b30:	ae 01       	movw	r20, r28
     b32:	47 5e       	subi	r20, 0xE7	; 231
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	6f 89       	ldd	r22, Y+23	; 0x17
     b38:	78 8d       	ldd	r23, Y+24	; 0x18
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	0e 94 aa 05 	call	0xb54	; 0xb54 <vfprintf>
     b42:	ef 81       	ldd	r30, Y+7	; 0x07
     b44:	f8 85       	ldd	r31, Y+8	; 0x08
     b46:	e0 0f       	add	r30, r16
     b48:	f1 1f       	adc	r31, r17
     b4a:	10 82       	st	Z, r1
     b4c:	2e 96       	adiw	r28, 0x0e	; 14
     b4e:	e4 e0       	ldi	r30, 0x04	; 4
     b50:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__epilogue_restores__+0x1c>

00000b54 <vfprintf>:
     b54:	ab e0       	ldi	r26, 0x0B	; 11
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e0 eb       	ldi	r30, 0xB0	; 176
     b5a:	f5 e0       	ldi	r31, 0x05	; 5
     b5c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__prologue_saves__>
     b60:	6c 01       	movw	r12, r24
     b62:	7b 01       	movw	r14, r22
     b64:	8a 01       	movw	r16, r20
     b66:	fc 01       	movw	r30, r24
     b68:	17 82       	std	Z+7, r1	; 0x07
     b6a:	16 82       	std	Z+6, r1	; 0x06
     b6c:	83 81       	ldd	r24, Z+3	; 0x03
     b6e:	81 ff       	sbrs	r24, 1
     b70:	cc c1       	rjmp	.+920    	; 0xf0a <vfprintf+0x3b6>
     b72:	ce 01       	movw	r24, r28
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	3c 01       	movw	r6, r24
     b78:	f6 01       	movw	r30, r12
     b7a:	93 81       	ldd	r25, Z+3	; 0x03
     b7c:	f7 01       	movw	r30, r14
     b7e:	93 fd       	sbrc	r25, 3
     b80:	85 91       	lpm	r24, Z+
     b82:	93 ff       	sbrs	r25, 3
     b84:	81 91       	ld	r24, Z+
     b86:	7f 01       	movw	r14, r30
     b88:	88 23       	and	r24, r24
     b8a:	09 f4       	brne	.+2      	; 0xb8e <vfprintf+0x3a>
     b8c:	ba c1       	rjmp	.+884    	; 0xf02 <vfprintf+0x3ae>
     b8e:	85 32       	cpi	r24, 0x25	; 37
     b90:	39 f4       	brne	.+14     	; 0xba0 <vfprintf+0x4c>
     b92:	93 fd       	sbrc	r25, 3
     b94:	85 91       	lpm	r24, Z+
     b96:	93 ff       	sbrs	r25, 3
     b98:	81 91       	ld	r24, Z+
     b9a:	7f 01       	movw	r14, r30
     b9c:	85 32       	cpi	r24, 0x25	; 37
     b9e:	29 f4       	brne	.+10     	; 0xbaa <vfprintf+0x56>
     ba0:	b6 01       	movw	r22, r12
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     ba8:	e7 cf       	rjmp	.-50     	; 0xb78 <vfprintf+0x24>
     baa:	91 2c       	mov	r9, r1
     bac:	21 2c       	mov	r2, r1
     bae:	31 2c       	mov	r3, r1
     bb0:	ff e1       	ldi	r31, 0x1F	; 31
     bb2:	f3 15       	cp	r31, r3
     bb4:	d8 f0       	brcs	.+54     	; 0xbec <vfprintf+0x98>
     bb6:	8b 32       	cpi	r24, 0x2B	; 43
     bb8:	79 f0       	breq	.+30     	; 0xbd8 <vfprintf+0x84>
     bba:	38 f4       	brcc	.+14     	; 0xbca <vfprintf+0x76>
     bbc:	80 32       	cpi	r24, 0x20	; 32
     bbe:	79 f0       	breq	.+30     	; 0xbde <vfprintf+0x8a>
     bc0:	83 32       	cpi	r24, 0x23	; 35
     bc2:	a1 f4       	brne	.+40     	; 0xbec <vfprintf+0x98>
     bc4:	23 2d       	mov	r18, r3
     bc6:	20 61       	ori	r18, 0x10	; 16
     bc8:	1d c0       	rjmp	.+58     	; 0xc04 <vfprintf+0xb0>
     bca:	8d 32       	cpi	r24, 0x2D	; 45
     bcc:	61 f0       	breq	.+24     	; 0xbe6 <vfprintf+0x92>
     bce:	80 33       	cpi	r24, 0x30	; 48
     bd0:	69 f4       	brne	.+26     	; 0xbec <vfprintf+0x98>
     bd2:	23 2d       	mov	r18, r3
     bd4:	21 60       	ori	r18, 0x01	; 1
     bd6:	16 c0       	rjmp	.+44     	; 0xc04 <vfprintf+0xb0>
     bd8:	83 2d       	mov	r24, r3
     bda:	82 60       	ori	r24, 0x02	; 2
     bdc:	38 2e       	mov	r3, r24
     bde:	e3 2d       	mov	r30, r3
     be0:	e4 60       	ori	r30, 0x04	; 4
     be2:	3e 2e       	mov	r3, r30
     be4:	2a c0       	rjmp	.+84     	; 0xc3a <vfprintf+0xe6>
     be6:	f3 2d       	mov	r31, r3
     be8:	f8 60       	ori	r31, 0x08	; 8
     bea:	1d c0       	rjmp	.+58     	; 0xc26 <vfprintf+0xd2>
     bec:	37 fc       	sbrc	r3, 7
     bee:	2d c0       	rjmp	.+90     	; 0xc4a <vfprintf+0xf6>
     bf0:	20 ed       	ldi	r18, 0xD0	; 208
     bf2:	28 0f       	add	r18, r24
     bf4:	2a 30       	cpi	r18, 0x0A	; 10
     bf6:	40 f0       	brcs	.+16     	; 0xc08 <vfprintf+0xb4>
     bf8:	8e 32       	cpi	r24, 0x2E	; 46
     bfa:	b9 f4       	brne	.+46     	; 0xc2a <vfprintf+0xd6>
     bfc:	36 fc       	sbrc	r3, 6
     bfe:	81 c1       	rjmp	.+770    	; 0xf02 <vfprintf+0x3ae>
     c00:	23 2d       	mov	r18, r3
     c02:	20 64       	ori	r18, 0x40	; 64
     c04:	32 2e       	mov	r3, r18
     c06:	19 c0       	rjmp	.+50     	; 0xc3a <vfprintf+0xe6>
     c08:	36 fe       	sbrs	r3, 6
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <vfprintf+0xc4>
     c0c:	8a e0       	ldi	r24, 0x0A	; 10
     c0e:	98 9e       	mul	r9, r24
     c10:	20 0d       	add	r18, r0
     c12:	11 24       	eor	r1, r1
     c14:	92 2e       	mov	r9, r18
     c16:	11 c0       	rjmp	.+34     	; 0xc3a <vfprintf+0xe6>
     c18:	ea e0       	ldi	r30, 0x0A	; 10
     c1a:	2e 9e       	mul	r2, r30
     c1c:	20 0d       	add	r18, r0
     c1e:	11 24       	eor	r1, r1
     c20:	22 2e       	mov	r2, r18
     c22:	f3 2d       	mov	r31, r3
     c24:	f0 62       	ori	r31, 0x20	; 32
     c26:	3f 2e       	mov	r3, r31
     c28:	08 c0       	rjmp	.+16     	; 0xc3a <vfprintf+0xe6>
     c2a:	8c 36       	cpi	r24, 0x6C	; 108
     c2c:	21 f4       	brne	.+8      	; 0xc36 <vfprintf+0xe2>
     c2e:	83 2d       	mov	r24, r3
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	38 2e       	mov	r3, r24
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <vfprintf+0xe6>
     c36:	88 36       	cpi	r24, 0x68	; 104
     c38:	41 f4       	brne	.+16     	; 0xc4a <vfprintf+0xf6>
     c3a:	f7 01       	movw	r30, r14
     c3c:	93 fd       	sbrc	r25, 3
     c3e:	85 91       	lpm	r24, Z+
     c40:	93 ff       	sbrs	r25, 3
     c42:	81 91       	ld	r24, Z+
     c44:	7f 01       	movw	r14, r30
     c46:	81 11       	cpse	r24, r1
     c48:	b3 cf       	rjmp	.-154    	; 0xbb0 <vfprintf+0x5c>
     c4a:	98 2f       	mov	r25, r24
     c4c:	9f 7d       	andi	r25, 0xDF	; 223
     c4e:	95 54       	subi	r25, 0x45	; 69
     c50:	93 30       	cpi	r25, 0x03	; 3
     c52:	28 f4       	brcc	.+10     	; 0xc5e <vfprintf+0x10a>
     c54:	0c 5f       	subi	r16, 0xFC	; 252
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	9f e3       	ldi	r25, 0x3F	; 63
     c5a:	99 83       	std	Y+1, r25	; 0x01
     c5c:	0d c0       	rjmp	.+26     	; 0xc78 <vfprintf+0x124>
     c5e:	83 36       	cpi	r24, 0x63	; 99
     c60:	31 f0       	breq	.+12     	; 0xc6e <vfprintf+0x11a>
     c62:	83 37       	cpi	r24, 0x73	; 115
     c64:	71 f0       	breq	.+28     	; 0xc82 <vfprintf+0x12e>
     c66:	83 35       	cpi	r24, 0x53	; 83
     c68:	09 f0       	breq	.+2      	; 0xc6c <vfprintf+0x118>
     c6a:	59 c0       	rjmp	.+178    	; 0xd1e <vfprintf+0x1ca>
     c6c:	21 c0       	rjmp	.+66     	; 0xcb0 <vfprintf+0x15c>
     c6e:	f8 01       	movw	r30, r16
     c70:	80 81       	ld	r24, Z
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	0e 5f       	subi	r16, 0xFE	; 254
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	88 24       	eor	r8, r8
     c7a:	83 94       	inc	r8
     c7c:	91 2c       	mov	r9, r1
     c7e:	53 01       	movw	r10, r6
     c80:	13 c0       	rjmp	.+38     	; 0xca8 <vfprintf+0x154>
     c82:	28 01       	movw	r4, r16
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	4f 0e       	add	r4, r31
     c88:	51 1c       	adc	r5, r1
     c8a:	f8 01       	movw	r30, r16
     c8c:	a0 80       	ld	r10, Z
     c8e:	b1 80       	ldd	r11, Z+1	; 0x01
     c90:	36 fe       	sbrs	r3, 6
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <vfprintf+0x146>
     c94:	69 2d       	mov	r22, r9
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <vfprintf+0x14a>
     c9a:	6f ef       	ldi	r22, 0xFF	; 255
     c9c:	7f ef       	ldi	r23, 0xFF	; 255
     c9e:	c5 01       	movw	r24, r10
     ca0:	0e 94 96 07 	call	0xf2c	; 0xf2c <strnlen>
     ca4:	4c 01       	movw	r8, r24
     ca6:	82 01       	movw	r16, r4
     ca8:	f3 2d       	mov	r31, r3
     caa:	ff 77       	andi	r31, 0x7F	; 127
     cac:	3f 2e       	mov	r3, r31
     cae:	16 c0       	rjmp	.+44     	; 0xcdc <vfprintf+0x188>
     cb0:	28 01       	movw	r4, r16
     cb2:	22 e0       	ldi	r18, 0x02	; 2
     cb4:	42 0e       	add	r4, r18
     cb6:	51 1c       	adc	r5, r1
     cb8:	f8 01       	movw	r30, r16
     cba:	a0 80       	ld	r10, Z
     cbc:	b1 80       	ldd	r11, Z+1	; 0x01
     cbe:	36 fe       	sbrs	r3, 6
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <vfprintf+0x174>
     cc2:	69 2d       	mov	r22, r9
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <vfprintf+0x178>
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	7f ef       	ldi	r23, 0xFF	; 255
     ccc:	c5 01       	movw	r24, r10
     cce:	0e 94 8b 07 	call	0xf16	; 0xf16 <strnlen_P>
     cd2:	4c 01       	movw	r8, r24
     cd4:	f3 2d       	mov	r31, r3
     cd6:	f0 68       	ori	r31, 0x80	; 128
     cd8:	3f 2e       	mov	r3, r31
     cda:	82 01       	movw	r16, r4
     cdc:	33 fc       	sbrc	r3, 3
     cde:	1b c0       	rjmp	.+54     	; 0xd16 <vfprintf+0x1c2>
     ce0:	82 2d       	mov	r24, r2
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	88 16       	cp	r8, r24
     ce6:	99 06       	cpc	r9, r25
     ce8:	b0 f4       	brcc	.+44     	; 0xd16 <vfprintf+0x1c2>
     cea:	b6 01       	movw	r22, r12
     cec:	80 e2       	ldi	r24, 0x20	; 32
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     cf4:	2a 94       	dec	r2
     cf6:	f4 cf       	rjmp	.-24     	; 0xce0 <vfprintf+0x18c>
     cf8:	f5 01       	movw	r30, r10
     cfa:	37 fc       	sbrc	r3, 7
     cfc:	85 91       	lpm	r24, Z+
     cfe:	37 fe       	sbrs	r3, 7
     d00:	81 91       	ld	r24, Z+
     d02:	5f 01       	movw	r10, r30
     d04:	b6 01       	movw	r22, r12
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     d0c:	21 10       	cpse	r2, r1
     d0e:	2a 94       	dec	r2
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	82 1a       	sub	r8, r18
     d14:	91 08       	sbc	r9, r1
     d16:	81 14       	cp	r8, r1
     d18:	91 04       	cpc	r9, r1
     d1a:	71 f7       	brne	.-36     	; 0xcf8 <vfprintf+0x1a4>
     d1c:	e8 c0       	rjmp	.+464    	; 0xeee <vfprintf+0x39a>
     d1e:	84 36       	cpi	r24, 0x64	; 100
     d20:	11 f0       	breq	.+4      	; 0xd26 <vfprintf+0x1d2>
     d22:	89 36       	cpi	r24, 0x69	; 105
     d24:	41 f5       	brne	.+80     	; 0xd76 <vfprintf+0x222>
     d26:	f8 01       	movw	r30, r16
     d28:	37 fe       	sbrs	r3, 7
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <vfprintf+0x1e6>
     d2c:	60 81       	ld	r22, Z
     d2e:	71 81       	ldd	r23, Z+1	; 0x01
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	0c 5f       	subi	r16, 0xFC	; 252
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	08 c0       	rjmp	.+16     	; 0xd4a <vfprintf+0x1f6>
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	07 2e       	mov	r0, r23
     d40:	00 0c       	add	r0, r0
     d42:	88 0b       	sbc	r24, r24
     d44:	99 0b       	sbc	r25, r25
     d46:	0e 5f       	subi	r16, 0xFE	; 254
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	f3 2d       	mov	r31, r3
     d4c:	ff 76       	andi	r31, 0x6F	; 111
     d4e:	3f 2e       	mov	r3, r31
     d50:	97 ff       	sbrs	r25, 7
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <vfprintf+0x212>
     d54:	90 95       	com	r25
     d56:	80 95       	com	r24
     d58:	70 95       	com	r23
     d5a:	61 95       	neg	r22
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	8f 4f       	sbci	r24, 0xFF	; 255
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	f0 68       	ori	r31, 0x80	; 128
     d64:	3f 2e       	mov	r3, r31
     d66:	2a e0       	ldi	r18, 0x0A	; 10
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	a3 01       	movw	r20, r6
     d6c:	0e 94 dd 07 	call	0xfba	; 0xfba <__ultoa_invert>
     d70:	88 2e       	mov	r8, r24
     d72:	86 18       	sub	r8, r6
     d74:	45 c0       	rjmp	.+138    	; 0xe00 <vfprintf+0x2ac>
     d76:	85 37       	cpi	r24, 0x75	; 117
     d78:	31 f4       	brne	.+12     	; 0xd86 <vfprintf+0x232>
     d7a:	23 2d       	mov	r18, r3
     d7c:	2f 7e       	andi	r18, 0xEF	; 239
     d7e:	b2 2e       	mov	r11, r18
     d80:	2a e0       	ldi	r18, 0x0A	; 10
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	25 c0       	rjmp	.+74     	; 0xdd0 <vfprintf+0x27c>
     d86:	93 2d       	mov	r25, r3
     d88:	99 7f       	andi	r25, 0xF9	; 249
     d8a:	b9 2e       	mov	r11, r25
     d8c:	8f 36       	cpi	r24, 0x6F	; 111
     d8e:	c1 f0       	breq	.+48     	; 0xdc0 <vfprintf+0x26c>
     d90:	18 f4       	brcc	.+6      	; 0xd98 <vfprintf+0x244>
     d92:	88 35       	cpi	r24, 0x58	; 88
     d94:	79 f0       	breq	.+30     	; 0xdb4 <vfprintf+0x260>
     d96:	b5 c0       	rjmp	.+362    	; 0xf02 <vfprintf+0x3ae>
     d98:	80 37       	cpi	r24, 0x70	; 112
     d9a:	19 f0       	breq	.+6      	; 0xda2 <vfprintf+0x24e>
     d9c:	88 37       	cpi	r24, 0x78	; 120
     d9e:	21 f0       	breq	.+8      	; 0xda8 <vfprintf+0x254>
     da0:	b0 c0       	rjmp	.+352    	; 0xf02 <vfprintf+0x3ae>
     da2:	e9 2f       	mov	r30, r25
     da4:	e0 61       	ori	r30, 0x10	; 16
     da6:	be 2e       	mov	r11, r30
     da8:	b4 fe       	sbrs	r11, 4
     daa:	0d c0       	rjmp	.+26     	; 0xdc6 <vfprintf+0x272>
     dac:	fb 2d       	mov	r31, r11
     dae:	f4 60       	ori	r31, 0x04	; 4
     db0:	bf 2e       	mov	r11, r31
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <vfprintf+0x272>
     db4:	34 fe       	sbrs	r3, 4
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <vfprintf+0x278>
     db8:	29 2f       	mov	r18, r25
     dba:	26 60       	ori	r18, 0x06	; 6
     dbc:	b2 2e       	mov	r11, r18
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <vfprintf+0x278>
     dc0:	28 e0       	ldi	r18, 0x08	; 8
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <vfprintf+0x27c>
     dc6:	20 e1       	ldi	r18, 0x10	; 16
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <vfprintf+0x27c>
     dcc:	20 e1       	ldi	r18, 0x10	; 16
     dce:	32 e0       	ldi	r19, 0x02	; 2
     dd0:	f8 01       	movw	r30, r16
     dd2:	b7 fe       	sbrs	r11, 7
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <vfprintf+0x290>
     dd6:	60 81       	ld	r22, Z
     dd8:	71 81       	ldd	r23, Z+1	; 0x01
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	0c 5f       	subi	r16, 0xFC	; 252
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <vfprintf+0x29c>
     de4:	60 81       	ld	r22, Z
     de6:	71 81       	ldd	r23, Z+1	; 0x01
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 5f       	subi	r16, 0xFE	; 254
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	a3 01       	movw	r20, r6
     df2:	0e 94 dd 07 	call	0xfba	; 0xfba <__ultoa_invert>
     df6:	88 2e       	mov	r8, r24
     df8:	86 18       	sub	r8, r6
     dfa:	fb 2d       	mov	r31, r11
     dfc:	ff 77       	andi	r31, 0x7F	; 127
     dfe:	3f 2e       	mov	r3, r31
     e00:	36 fe       	sbrs	r3, 6
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <vfprintf+0x2ca>
     e04:	23 2d       	mov	r18, r3
     e06:	2e 7f       	andi	r18, 0xFE	; 254
     e08:	a2 2e       	mov	r10, r18
     e0a:	89 14       	cp	r8, r9
     e0c:	58 f4       	brcc	.+22     	; 0xe24 <vfprintf+0x2d0>
     e0e:	34 fe       	sbrs	r3, 4
     e10:	0b c0       	rjmp	.+22     	; 0xe28 <vfprintf+0x2d4>
     e12:	32 fc       	sbrc	r3, 2
     e14:	09 c0       	rjmp	.+18     	; 0xe28 <vfprintf+0x2d4>
     e16:	83 2d       	mov	r24, r3
     e18:	8e 7e       	andi	r24, 0xEE	; 238
     e1a:	a8 2e       	mov	r10, r24
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <vfprintf+0x2d4>
     e1e:	b8 2c       	mov	r11, r8
     e20:	a3 2c       	mov	r10, r3
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x2d6>
     e24:	b8 2c       	mov	r11, r8
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <vfprintf+0x2d6>
     e28:	b9 2c       	mov	r11, r9
     e2a:	a4 fe       	sbrs	r10, 4
     e2c:	0f c0       	rjmp	.+30     	; 0xe4c <vfprintf+0x2f8>
     e2e:	fe 01       	movw	r30, r28
     e30:	e8 0d       	add	r30, r8
     e32:	f1 1d       	adc	r31, r1
     e34:	80 81       	ld	r24, Z
     e36:	80 33       	cpi	r24, 0x30	; 48
     e38:	21 f4       	brne	.+8      	; 0xe42 <vfprintf+0x2ee>
     e3a:	9a 2d       	mov	r25, r10
     e3c:	99 7e       	andi	r25, 0xE9	; 233
     e3e:	a9 2e       	mov	r10, r25
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <vfprintf+0x300>
     e42:	a2 fe       	sbrs	r10, 2
     e44:	06 c0       	rjmp	.+12     	; 0xe52 <vfprintf+0x2fe>
     e46:	b3 94       	inc	r11
     e48:	b3 94       	inc	r11
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <vfprintf+0x300>
     e4c:	8a 2d       	mov	r24, r10
     e4e:	86 78       	andi	r24, 0x86	; 134
     e50:	09 f0       	breq	.+2      	; 0xe54 <vfprintf+0x300>
     e52:	b3 94       	inc	r11
     e54:	a3 fc       	sbrc	r10, 3
     e56:	11 c0       	rjmp	.+34     	; 0xe7a <vfprintf+0x326>
     e58:	a0 fe       	sbrs	r10, 0
     e5a:	06 c0       	rjmp	.+12     	; 0xe68 <vfprintf+0x314>
     e5c:	b2 14       	cp	r11, r2
     e5e:	88 f4       	brcc	.+34     	; 0xe82 <vfprintf+0x32e>
     e60:	28 0c       	add	r2, r8
     e62:	92 2c       	mov	r9, r2
     e64:	9b 18       	sub	r9, r11
     e66:	0e c0       	rjmp	.+28     	; 0xe84 <vfprintf+0x330>
     e68:	b2 14       	cp	r11, r2
     e6a:	60 f4       	brcc	.+24     	; 0xe84 <vfprintf+0x330>
     e6c:	b6 01       	movw	r22, r12
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     e76:	b3 94       	inc	r11
     e78:	f7 cf       	rjmp	.-18     	; 0xe68 <vfprintf+0x314>
     e7a:	b2 14       	cp	r11, r2
     e7c:	18 f4       	brcc	.+6      	; 0xe84 <vfprintf+0x330>
     e7e:	2b 18       	sub	r2, r11
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <vfprintf+0x332>
     e82:	98 2c       	mov	r9, r8
     e84:	21 2c       	mov	r2, r1
     e86:	a4 fe       	sbrs	r10, 4
     e88:	10 c0       	rjmp	.+32     	; 0xeaa <vfprintf+0x356>
     e8a:	b6 01       	movw	r22, r12
     e8c:	80 e3       	ldi	r24, 0x30	; 48
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     e94:	a2 fe       	sbrs	r10, 2
     e96:	17 c0       	rjmp	.+46     	; 0xec6 <vfprintf+0x372>
     e98:	a1 fc       	sbrc	r10, 1
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <vfprintf+0x34e>
     e9c:	88 e7       	ldi	r24, 0x78	; 120
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <vfprintf+0x352>
     ea2:	88 e5       	ldi	r24, 0x58	; 88
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	b6 01       	movw	r22, r12
     ea8:	0c c0       	rjmp	.+24     	; 0xec2 <vfprintf+0x36e>
     eaa:	8a 2d       	mov	r24, r10
     eac:	86 78       	andi	r24, 0x86	; 134
     eae:	59 f0       	breq	.+22     	; 0xec6 <vfprintf+0x372>
     eb0:	a1 fe       	sbrs	r10, 1
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <vfprintf+0x364>
     eb4:	8b e2       	ldi	r24, 0x2B	; 43
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <vfprintf+0x366>
     eb8:	80 e2       	ldi	r24, 0x20	; 32
     eba:	a7 fc       	sbrc	r10, 7
     ebc:	8d e2       	ldi	r24, 0x2D	; 45
     ebe:	b6 01       	movw	r22, r12
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     ec6:	89 14       	cp	r8, r9
     ec8:	38 f4       	brcc	.+14     	; 0xed8 <vfprintf+0x384>
     eca:	b6 01       	movw	r22, r12
     ecc:	80 e3       	ldi	r24, 0x30	; 48
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     ed4:	9a 94       	dec	r9
     ed6:	f7 cf       	rjmp	.-18     	; 0xec6 <vfprintf+0x372>
     ed8:	8a 94       	dec	r8
     eda:	f3 01       	movw	r30, r6
     edc:	e8 0d       	add	r30, r8
     ede:	f1 1d       	adc	r31, r1
     ee0:	80 81       	ld	r24, Z
     ee2:	b6 01       	movw	r22, r12
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     eea:	81 10       	cpse	r8, r1
     eec:	f5 cf       	rjmp	.-22     	; 0xed8 <vfprintf+0x384>
     eee:	22 20       	and	r2, r2
     ef0:	09 f4       	brne	.+2      	; 0xef4 <vfprintf+0x3a0>
     ef2:	42 ce       	rjmp	.-892    	; 0xb78 <vfprintf+0x24>
     ef4:	b6 01       	movw	r22, r12
     ef6:	80 e2       	ldi	r24, 0x20	; 32
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 a1 07 	call	0xf42	; 0xf42 <fputc>
     efe:	2a 94       	dec	r2
     f00:	f6 cf       	rjmp	.-20     	; 0xeee <vfprintf+0x39a>
     f02:	f6 01       	movw	r30, r12
     f04:	86 81       	ldd	r24, Z+6	; 0x06
     f06:	97 81       	ldd	r25, Z+7	; 0x07
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <vfprintf+0x3ba>
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	9f ef       	ldi	r25, 0xFF	; 255
     f0e:	2b 96       	adiw	r28, 0x0b	; 11
     f10:	e2 e1       	ldi	r30, 0x12	; 18
     f12:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__epilogue_restores__>

00000f16 <strnlen_P>:
     f16:	fc 01       	movw	r30, r24
     f18:	05 90       	lpm	r0, Z+
     f1a:	61 50       	subi	r22, 0x01	; 1
     f1c:	70 40       	sbci	r23, 0x00	; 0
     f1e:	01 10       	cpse	r0, r1
     f20:	d8 f7       	brcc	.-10     	; 0xf18 <strnlen_P+0x2>
     f22:	80 95       	com	r24
     f24:	90 95       	com	r25
     f26:	8e 0f       	add	r24, r30
     f28:	9f 1f       	adc	r25, r31
     f2a:	08 95       	ret

00000f2c <strnlen>:
     f2c:	fc 01       	movw	r30, r24
     f2e:	61 50       	subi	r22, 0x01	; 1
     f30:	70 40       	sbci	r23, 0x00	; 0
     f32:	01 90       	ld	r0, Z+
     f34:	01 10       	cpse	r0, r1
     f36:	d8 f7       	brcc	.-10     	; 0xf2e <strnlen+0x2>
     f38:	80 95       	com	r24
     f3a:	90 95       	com	r25
     f3c:	8e 0f       	add	r24, r30
     f3e:	9f 1f       	adc	r25, r31
     f40:	08 95       	ret

00000f42 <fputc>:
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	fb 01       	movw	r30, r22
     f4c:	23 81       	ldd	r18, Z+3	; 0x03
     f4e:	21 fd       	sbrc	r18, 1
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <fputc+0x16>
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	9f ef       	ldi	r25, 0xFF	; 255
     f56:	2c c0       	rjmp	.+88     	; 0xfb0 <fputc+0x6e>
     f58:	22 ff       	sbrs	r18, 2
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <fputc+0x46>
     f5c:	46 81       	ldd	r20, Z+6	; 0x06
     f5e:	57 81       	ldd	r21, Z+7	; 0x07
     f60:	24 81       	ldd	r18, Z+4	; 0x04
     f62:	35 81       	ldd	r19, Z+5	; 0x05
     f64:	42 17       	cp	r20, r18
     f66:	53 07       	cpc	r21, r19
     f68:	44 f4       	brge	.+16     	; 0xf7a <fputc+0x38>
     f6a:	a0 81       	ld	r26, Z
     f6c:	b1 81       	ldd	r27, Z+1	; 0x01
     f6e:	9d 01       	movw	r18, r26
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	31 83       	std	Z+1, r19	; 0x01
     f76:	20 83       	st	Z, r18
     f78:	8c 93       	st	X, r24
     f7a:	26 81       	ldd	r18, Z+6	; 0x06
     f7c:	37 81       	ldd	r19, Z+7	; 0x07
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	37 83       	std	Z+7, r19	; 0x07
     f84:	26 83       	std	Z+6, r18	; 0x06
     f86:	14 c0       	rjmp	.+40     	; 0xfb0 <fputc+0x6e>
     f88:	8b 01       	movw	r16, r22
     f8a:	ec 01       	movw	r28, r24
     f8c:	fb 01       	movw	r30, r22
     f8e:	00 84       	ldd	r0, Z+8	; 0x08
     f90:	f1 85       	ldd	r31, Z+9	; 0x09
     f92:	e0 2d       	mov	r30, r0
     f94:	09 95       	icall
     f96:	89 2b       	or	r24, r25
     f98:	e1 f6       	brne	.-72     	; 0xf52 <fputc+0x10>
     f9a:	d8 01       	movw	r26, r16
     f9c:	16 96       	adiw	r26, 0x06	; 6
     f9e:	8d 91       	ld	r24, X+
     fa0:	9c 91       	ld	r25, X
     fa2:	17 97       	sbiw	r26, 0x07	; 7
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	17 96       	adiw	r26, 0x07	; 7
     fa8:	9c 93       	st	X, r25
     faa:	8e 93       	st	-X, r24
     fac:	16 97       	sbiw	r26, 0x06	; 6
     fae:	ce 01       	movw	r24, r28
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	08 95       	ret

00000fba <__ultoa_invert>:
     fba:	fa 01       	movw	r30, r20
     fbc:	aa 27       	eor	r26, r26
     fbe:	28 30       	cpi	r18, 0x08	; 8
     fc0:	51 f1       	breq	.+84     	; 0x1016 <__ultoa_invert+0x5c>
     fc2:	20 31       	cpi	r18, 0x10	; 16
     fc4:	81 f1       	breq	.+96     	; 0x1026 <__ultoa_invert+0x6c>
     fc6:	e8 94       	clt
     fc8:	6f 93       	push	r22
     fca:	6e 7f       	andi	r22, 0xFE	; 254
     fcc:	6e 5f       	subi	r22, 0xFE	; 254
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	8f 4f       	sbci	r24, 0xFF	; 255
     fd2:	9f 4f       	sbci	r25, 0xFF	; 255
     fd4:	af 4f       	sbci	r26, 0xFF	; 255
     fd6:	b1 e0       	ldi	r27, 0x01	; 1
     fd8:	3e d0       	rcall	.+124    	; 0x1056 <__ultoa_invert+0x9c>
     fda:	b4 e0       	ldi	r27, 0x04	; 4
     fdc:	3c d0       	rcall	.+120    	; 0x1056 <__ultoa_invert+0x9c>
     fde:	67 0f       	add	r22, r23
     fe0:	78 1f       	adc	r23, r24
     fe2:	89 1f       	adc	r24, r25
     fe4:	9a 1f       	adc	r25, r26
     fe6:	a1 1d       	adc	r26, r1
     fe8:	68 0f       	add	r22, r24
     fea:	79 1f       	adc	r23, r25
     fec:	8a 1f       	adc	r24, r26
     fee:	91 1d       	adc	r25, r1
     ff0:	a1 1d       	adc	r26, r1
     ff2:	6a 0f       	add	r22, r26
     ff4:	71 1d       	adc	r23, r1
     ff6:	81 1d       	adc	r24, r1
     ff8:	91 1d       	adc	r25, r1
     ffa:	a1 1d       	adc	r26, r1
     ffc:	20 d0       	rcall	.+64     	; 0x103e <__ultoa_invert+0x84>
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__ultoa_invert+0x48>
    1000:	68 94       	set
    1002:	3f 91       	pop	r19
    1004:	2a e0       	ldi	r18, 0x0A	; 10
    1006:	26 9f       	mul	r18, r22
    1008:	11 24       	eor	r1, r1
    100a:	30 19       	sub	r19, r0
    100c:	30 5d       	subi	r19, 0xD0	; 208
    100e:	31 93       	st	Z+, r19
    1010:	de f6       	brtc	.-74     	; 0xfc8 <__ultoa_invert+0xe>
    1012:	cf 01       	movw	r24, r30
    1014:	08 95       	ret
    1016:	46 2f       	mov	r20, r22
    1018:	47 70       	andi	r20, 0x07	; 7
    101a:	40 5d       	subi	r20, 0xD0	; 208
    101c:	41 93       	st	Z+, r20
    101e:	b3 e0       	ldi	r27, 0x03	; 3
    1020:	0f d0       	rcall	.+30     	; 0x1040 <__ultoa_invert+0x86>
    1022:	c9 f7       	brne	.-14     	; 0x1016 <__ultoa_invert+0x5c>
    1024:	f6 cf       	rjmp	.-20     	; 0x1012 <__ultoa_invert+0x58>
    1026:	46 2f       	mov	r20, r22
    1028:	4f 70       	andi	r20, 0x0F	; 15
    102a:	40 5d       	subi	r20, 0xD0	; 208
    102c:	4a 33       	cpi	r20, 0x3A	; 58
    102e:	18 f0       	brcs	.+6      	; 0x1036 <__ultoa_invert+0x7c>
    1030:	49 5d       	subi	r20, 0xD9	; 217
    1032:	31 fd       	sbrc	r19, 1
    1034:	40 52       	subi	r20, 0x20	; 32
    1036:	41 93       	st	Z+, r20
    1038:	02 d0       	rcall	.+4      	; 0x103e <__ultoa_invert+0x84>
    103a:	a9 f7       	brne	.-22     	; 0x1026 <__ultoa_invert+0x6c>
    103c:	ea cf       	rjmp	.-44     	; 0x1012 <__ultoa_invert+0x58>
    103e:	b4 e0       	ldi	r27, 0x04	; 4
    1040:	a6 95       	lsr	r26
    1042:	97 95       	ror	r25
    1044:	87 95       	ror	r24
    1046:	77 95       	ror	r23
    1048:	67 95       	ror	r22
    104a:	ba 95       	dec	r27
    104c:	c9 f7       	brne	.-14     	; 0x1040 <__ultoa_invert+0x86>
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	61 05       	cpc	r22, r1
    1052:	71 05       	cpc	r23, r1
    1054:	08 95       	ret
    1056:	9b 01       	movw	r18, r22
    1058:	ac 01       	movw	r20, r24
    105a:	0a 2e       	mov	r0, r26
    105c:	06 94       	lsr	r0
    105e:	57 95       	ror	r21
    1060:	47 95       	ror	r20
    1062:	37 95       	ror	r19
    1064:	27 95       	ror	r18
    1066:	ba 95       	dec	r27
    1068:	c9 f7       	brne	.-14     	; 0x105c <__ultoa_invert+0xa2>
    106a:	62 0f       	add	r22, r18
    106c:	73 1f       	adc	r23, r19
    106e:	84 1f       	adc	r24, r20
    1070:	95 1f       	adc	r25, r21
    1072:	a0 1d       	adc	r26, r0
    1074:	08 95       	ret

00001076 <__prologue_saves__>:
    1076:	2f 92       	push	r2
    1078:	3f 92       	push	r3
    107a:	4f 92       	push	r4
    107c:	5f 92       	push	r5
    107e:	6f 92       	push	r6
    1080:	7f 92       	push	r7
    1082:	8f 92       	push	r8
    1084:	9f 92       	push	r9
    1086:	af 92       	push	r10
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	ca 1b       	sub	r28, r26
    10a0:	db 0b       	sbc	r29, r27
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	09 94       	ijmp

000010ae <__epilogue_restores__>:
    10ae:	2a 88       	ldd	r2, Y+18	; 0x12
    10b0:	39 88       	ldd	r3, Y+17	; 0x11
    10b2:	48 88       	ldd	r4, Y+16	; 0x10
    10b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    10b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    10b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    10ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    10bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    10be:	aa 84       	ldd	r10, Y+10	; 0x0a
    10c0:	b9 84       	ldd	r11, Y+9	; 0x09
    10c2:	c8 84       	ldd	r12, Y+8	; 0x08
    10c4:	df 80       	ldd	r13, Y+7	; 0x07
    10c6:	ee 80       	ldd	r14, Y+6	; 0x06
    10c8:	fd 80       	ldd	r15, Y+5	; 0x05
    10ca:	0c 81       	ldd	r16, Y+4	; 0x04
    10cc:	1b 81       	ldd	r17, Y+3	; 0x03
    10ce:	aa 81       	ldd	r26, Y+2	; 0x02
    10d0:	b9 81       	ldd	r27, Y+1	; 0x01
    10d2:	ce 0f       	add	r28, r30
    10d4:	d1 1d       	adc	r29, r1
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	ed 01       	movw	r28, r26
    10e2:	08 95       	ret

000010e4 <_exit>:
    10e4:	f8 94       	cli

000010e6 <__stop_program>:
    10e6:	ff cf       	rjmp	.-2      	; 0x10e6 <__stop_program>
